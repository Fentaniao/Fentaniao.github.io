{"meta":{"title":"Knowledge Base","subtitle":"","description":"the Knowledge Base of Fentaniao","author":"Fentaniao","url":"https://fentaniao.github.io","root":"/"},"pages":[{"title":"","date":"2022-03-10T02:04:19.480Z","updated":"2022-03-10T02:04:19.480Z","comments":true,"path":"about.html","permalink":"https://fentaniao.github.io/about.html","excerpt":"","text":"关于这是Fentaniao打造的技术博客，我把它称为我的知识库（Knowledge Base）。 知识库是什么？知识库是用于创建公共或私有知识库、帮助中心、文档、手册等的工具。它可以设置为客户的自助服务中心。它也可以设置为私有，以便团队可以轻松协作和共享业务知识。 知识库的最终目的是使人们能够轻松地自行解决问题而无需寻求帮助。知识库既可以通过有组织的目录提供结构化知识，也可以提供将用户引导至最相关文章的可搜索内容。 知识库讨论什么？ 学习代码和开发相关项目时遇到问题的解决方案。 我是Microsoft Surface的忠实用户，数码产品的爱好者，所以这里讨论关于数码产品的相关知识，特别是Microsoft产品的使用。 我在Windows 11和Windows Subsystem Linux(WSL)平台上生活、学习和工作，所以这里也讨论包括Windows OS，Linux OS的使用。 我同时也是Windows Insider 和Microsoft Developer，我使用来自JetBrains、Microsoft、MathWorks、Adobe等公司的产品开发我的项目，所以这里也讨论相关软件的配置和使用。 本项目的实现查看本项目的自述文件以了解本项目的实现和部署。 ContactAuthor: Fentaniao Email: &#102;&#x65;&#x6e;&#x74;&#97;&#110;&#x69;&#x61;&#111;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d; Website: https://fentaniao.github.io LicenseBased on Hexo &amp; Nexmoe. GPL-3.0 License © Fentaniao"},{"title":"404","date":"2022-03-10T02:04:19.408Z","updated":"2022-03-10T02:04:19.408Z","comments":true,"path":"404.html","permalink":"https://fentaniao.github.io/404.html","excerpt":"","text":"你要访问的页面不存在，去别的页面逛逛吧！"},{"title":"文章归档","date":"2022-03-10T02:04:19.481Z","updated":"2022-03-10T02:04:19.481Z","comments":true,"path":"archive.html","permalink":"https://fentaniao.github.io/archive.html","excerpt":"","text":""},{"title":"","date":"2022-10-24T15:30:04.319Z","updated":"2022-03-10T02:04:19.498Z","comments":true,"path":"projects.html","permalink":"https://fentaniao.github.io/projects.html","excerpt":"","text":"Overview 👋 Hi, I’m @Fentaniao. 🔭 I’m currently working on the Dynamics of Covid-19 though the differential equations. 👀 I’m interested in coding, math, movies. I record my technical notes in https://fentaniao.github.io. 🌱 I’m currently learning developing WinUI 3 software, inertial navigation… 📫 Reach me through GitHub or &#102;&#101;&#x6e;&#116;&#x61;&#x6e;&#105;&#97;&#x6f;&#64;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;. Languages Tools Platforms Projects"}],"posts":[{"title":"Oracle数据库无法正常连接的解决方案","slug":"Oracle-Database-Connect","date":"2022-03-30T06:18:00.000Z","updated":"2022-07-15T03:36:13.329Z","comments":true,"path":"2022/03/30/Oracle-Database-Connect/","link":"","permalink":"https://fentaniao.github.io/2022/03/30/Oracle-Database-Connect/","excerpt":"本文包含以下几个问题的解决方案：Oracle 数据库的服务和监听程序消失、网络状态变动后，Oracle 数据库无法连接、Oracle 数据库监听程序的配置。","text":"本文包含以下几个问题的解决方案：Oracle 数据库的服务和监听程序消失、网络状态变动后，Oracle 数据库无法连接、Oracle 数据库监听程序的配置。 Oracle 数据库的服务和监听程序消失问题描述 Oracle SQL Develper，数据库连接不上，报路径不存在 监听服务 Listener 消失， OracleService 存在； SQLPlus 可运行，却无法连接到数据库。 服务中的所有有关 Oracle 的服务消失。 在 CMD 中使用lsnrctl status查询监听状态及lsnrctl start启动监听服务均报错。例如输出 1234567891011121314LSNRCTL for 64-bit Windows: Version 12.2.0.1.0 - Production on 30-7月 -2017 21:32:39Copyright (c) 1991, 2016, Oracle. All rights reserved.正在连接到 (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.0.6)(PORT=1521)))TNS-12541: TNS: 无监听程序TNS-12560: TNS: 协议适配器错误TNS-00511: 无监听程序64-bit Windows Error: 61: Unknown error正在连接到 (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))TNS-12541: TNS: 无监听程序TNS-12560: TNS: 协议适配器错误TNS-00511: 无监听程序64-bit Windows Error: 2: No such file or directory 原因推测报错原因应该是注册表中丢失了oracle实例的配置信息，导致丢失的原因多样，杀毒软件、木马病毒、其他恶意流氓软件等等。 解决方案 检查Oracle服务是否存在。 新增数据库ORCL实例服务的命令：oradim -new -sid ORCL。新增之后，服务列表中就会出现 OracleVssWriterORCL 和 OracleServiceOrcl 。 使用Oracle Net Configuration Assistant 重新配置监听程序，之后服务列表中就会出现OracleOraDB21Home1TNSListener。如果服务中未出现，则以管理员身份在控制台输入lsnrctl start手动启动监听程序后即可出现。 重新启动所有三个Oracle服务。 手动启动数据库，打开控制台，输入如下命令： 123$sqlplus /nolog #在不登录的情况下打开sqlpulssql&gt;conn system/manager as sysdba #使用system用户作为dba角色连接数据库,当然也可以用sys,sysman等用户来连接;sql&gt;startup #打开数据库 如果想故障重现，在服务中删除有关Oracle的服务。 网络状态变动后，Oracle 数据库无法连接问题描述PC 上安装有 Docker Desktop 应用程序，切换 Wifi 或在同一 Wifi 中 ip 地址发生变化后，Oracle 数据库无法连接 原因推测Oracle 数据库配置文件的默认设置受到 Docker Desktop 应用程序的影响，使得网络状态变化后， Oracle 无法正常找到监听程序的 ip 地址。 解决方案在稳定的网络环境下，重新启动 Docker Desktop.exe。 Oracle 数据库监听程序的配置背景资料 监听程序是驻留在Oracle 数据库服务器上的一种进程，其职责是监听客户机连接请求和管理服务器的通行量。 每次客户机请求与服务器进行会话时，监听程序就接收到实际请求。 如果客户机的信息与监听程序的信息相匹配，监听程序就授权连接服务器。 客户机上建立与服务器的连接过程实际上就是建立和服务器上的监听程序连接的过程。 客户机必须配置有与服务器协议地址相同的连接描述方才能像监听程序发送连接请求。 配置过程 启动Net Configuration Assistant.exe程序，出现[Oracle Net Configuration Assistant ：欢迎使用]对话框。 选择[监听程序配置]，单击[下一步] 如果需要添加监听程序，选择[添加]，单击[下一步]；如果需要添加监听程序，选择[重新配置监听程序]，单击[下一步]。 之后按提示进行操作，一般不需要额外更改默认设置。 参考 Oracle 12c 数据库监听程序消失解决方法： https://blog.csdn.net/u014351755/article/details/76419725 oracle监听程序的配置：https://blog.csdn.net/ITxiaobaibai/article/details/81302490","categories":[{"name":"SQL","slug":"SQL","permalink":"https://fentaniao.github.io/categories/SQL/"}],"tags":[]},{"title":"Oracle中解决数据库监听程序消失的解决方案","slug":"Oracle-start-listener","date":"2022-03-30T06:18:00.000Z","updated":"2022-04-16T03:38:17.951Z","comments":true,"path":"2022/03/30/Oracle-start-listener/","link":"","permalink":"https://fentaniao.github.io/2022/03/30/Oracle-start-listener/","excerpt":"Oracle中解决数据库监听程序消失的解决方案","text":"Oracle中解决数据库监听程序消失的解决方案 Oracle 12c 数据库监听程序消失解决方法问题描述Oracle SQL develper，数据库连接不上，报路径不存在——&gt;监听服务Listener消失，OracleService存在；sqlplus可运行，却无法连接到数据库；lsnrctl status及lsnrctl start报错。 原因推测可能被杀毒软件当作恶意程序删除。 解决方案查询监听状态报错，无法启动监听在CMD中检查监听程序状态 1lsnrctl status 输出 1234567891011121314LSNRCTL for 64-bit Windows: Version 12.2.0.1.0 - Production on 30-7月 -2017 21:32:39Copyright (c) 1991, 2016, Oracle. All rights reserved.正在连接到 (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.0.6)(PORT=1521)))TNS-12541: TNS: 无监听程序TNS-12560: TNS: 协议适配器错误TNS-00511: 无监听程序64-bit Windows Error: 61: Unknown error正在连接到 (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))TNS-12541: TNS: 无监听程序TNS-12560: TNS: 协议适配器错误TNS-00511: 无监听程序64-bit Windows Error: 2: No such file or directory 方法 使用Oracle Net Configuration Assistant 重新配置监听程序； 使用Oracle Net Manager配置监听程序和相应服务，注意数据库服务中的全局数据库名称、SID。 &#x3D;&#x3D;以administrator身份启动监听服务&#x3D;&#x3D;，在CMD中输入lsnrctl start。 SQL developer出错。经过第一步处理之后，任务管理器中监听服务Listener出现，注册表编辑器中也出现Listener一项，sqlplus可正常连接数据库，然而SQL developer的原有连接测试失败，无法连接。 方法：将所建连接的本机名localhost改为IP地址，连接成功。 oracle监听程序的配置背景资料•监听程序是驻留在Oracle数据库服务器上的一种进程，其职责是监听客户机连接请求和管理服务器的通行量。•每次客户机请求与服务器进行会话时，监听程序就接收到实际请求。•如果客户机的信息与监听程序的信息相匹配，监听程序就授权连接服务器。•客户机上建立与服务器的连接过程实际上就是建立和服务器上的监听程序连接的过程。•客户机必须配置有与服务器协议地址相同的连接描述方才能像监听程序发送连接请求。 配置过程（1）[开始]–〉[程序]–〉[Oracle-OraDb10g_Home1]–〉[Configuration and Migration Tools]–〉[Net Configuration Assistant]，出现[Oracle Net Configuration Assistant ：欢迎使用]对话框。选择[监听程序配置]，单击[下一步]。 参考 Oracle 12c 数据库监听程序消失解决方法： https://blog.csdn.net/u014351755/article/details/76419725 oracle监听程序的配置：https://blog.csdn.net/ITxiaobaibai/article/details/81302490","categories":[{"name":"SQL","slug":"SQL","permalink":"https://fentaniao.github.io/categories/SQL/"}],"tags":[]},{"title":"使用wsl2搭建基于Tensorflow和Pytorch GPU的深度学习环境","slug":"wsl2-deep-learning","date":"2022-03-22T15:59:00.000Z","updated":"2022-04-16T03:38:17.952Z","comments":true,"path":"2022/03/22/wsl2-deep-learning/","link":"","permalink":"https://fentaniao.github.io/2022/03/22/wsl2-deep-learning/","excerpt":"本文的主要目的是记录在WSL2中搭建使用GPU平台的深度学习框架环境的步骤与过程，包括Pytorch和TensorFlow。","text":"本文的主要目的是记录在WSL2中搭建使用GPU平台的深度学习框架环境的步骤与过程，包括Pytorch和TensorFlow。 [TOC] 前提 在Windows11或Windows10 21H2版本中已开启WSL2且安装了Ubuntu or Debian) 配备NVIDIA显卡 初始化Ubuntu 输入用户名，密码 更新包 代码1234567891011usernamepasswordpasswordsudo apt updatepasswordsudo apt-get upgrade 安装Python二选一 安装Anaconda因为我们是在Linux系统下安装Anaconda，所以选择Linux平台的64位版本 1wget https://repo.anaconda.com/archive/Anaconda3-2021.05-Linux-x86_64.sh 切换到解压后的目录 用bash命令执行.sh文件，开始安装 1bash Anaconda3-2021.05-Linux-x86_64.sh 安装纯Python1sudo apt-get install python3-pip python3-dev Python 2 与Python 3 的对比默认情况下，Ubuntu 在安装Python 包时使用Python 2（比如python-pip）。如果你想使用Python 3，那么应该使用python3 前缀代替python。例如： 1sudo apt-get install python3-pip python3-dev 使用pip 安装包时要记住，它默认安装的是Python 2 的包。想要安装Python 3 的包，你应该使用pip3。 1sudo pip3 install tensorflow-gpu 安装Python 科学套件 安装BLAS 库（这里安装的是OpenBLAS），确保你可以在CPU 上运行快速的张量运算。 安装Python 科学套件：Numpy、SciPy 和Matplotlib。无论是否做深度学习，如果想要使用Python 进行任意类型的机器学习或科学计算，这一步都是必需的。 安装HDF5。这个库最初由NASA（美国国家航空航天局）开发，用高效的二进制格式来保存数值数据的大文件。它可以让你将Keras 模型快速高效地保存到磁盘。 安装Graphviz 和pydot-ng，这两个包可以将Keras 模型可视化。它们对运行Keras 并不是必需的，所以你可以跳过这一步，在需要时再来安装这些包。 安装某些代码示例中用到的其他包。 代码12345678910111213sudo apt-get install python3-pip python3-dev -ysudo apt-get install build-essential cmake git unzip pkg-config libopenblas-dev liblapack-dev -ysudo apt-get install python3-numpy python3-scipy python3-matplotlib python3-yaml -ysudo apt-get install libhdf5-dev python3-h5py -ysudo apt-get install graphviz -ysudo pip3 install pydot-ngsudo apt-get install python3-opencv -y 安装显卡驱动需要针对 WSL 的特殊版本驱动，NVIDIA 官方下载网址。 注意此处选择的操作系统是指Windows的版本，而不是WSL中的发行版。 下载后，在 Windows 环境下安装驱动。 安装完驱动后，在 WSL 环境下，通过nvidia-smi和nvidia-smi -L命令，就可以看到显卡信息了。 安装CUDA二选一 1.官方的安装指引https://developer.nvidia.com/cuda-toolkit 执行图上的代码 12wget https://developer.download.nvidia.com/compute/cuda/11.6.1/local_installers/cuda_11.6.1_510.47.03_linux.runsudosh cuda_11.6.1_510.47.03_linux.run 2.换源安装cuda-toolkit1234567sudo apt-key adv --fetch-keys http://mirrors.aliyun.com/nvidia-cuda/ubuntu1804/x86_64/7fa2af80.pubsudo sh -c &#x27;echo &quot;deb http://mirrors.aliyun.com/nvidia-cuda/ubuntu1804/x86_64 /&quot; &gt; /etc/apt/sources.list.d/cuda.list&#x27;sudo apt-get updatesudo apt-get install -y cuda-toolkit-11-0 设置cuda环境变量在主目录下的~/.bashrc文件添加如下路径： 12sudo su -vim ~/.bashrc 末尾添加并保存： 123export CUDA_HOME=/usr/local/cudaexport PATH=$PATH:$CUDA_HOME/binexport LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125; 如果提示缺少相应的依赖库，直接执行如下代码自动安装相应的依赖库 1sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev 安装cuDNN安装cudnn的时候需要登录Nvidia账号，直接下载:cuDNN Library for Linux (x86) 然后打开终端执行： 123tar -zxvf cudnn-10.2-linux-x64-v8.0.4.30.tgzsudo cp -P cuda/lib64/libcudnn* /usr/local/cuda-11.0/lib64/sudo cp cuda/include/cudnn.h /usr/local/cuda-11.0/include/ 为所有用户设置读取权限： 12sudo chmod a+r /usr/local/cuda-11.0/include/cudnn.h sudo chmod a+r /usr/local/cuda-11.0/lib64/libcudnn* 验证cuda是否安装成功 测试Keras安装TensorFlow ① 无论是否支持GPU，都可以使用pip从PyPI 安装TensorFlow。安装不支持GPU 的TensorFlow 的命令如下。 1sudo pip3 install tensorflow ② 安装支持GPU 的TensorFlow 的命令如下。 1sudo pip3 install tensorflow-gpu 安装Keras 1sudo pip3 install keras 示例代码 12345678910111213141516171819import tensorflow as tfmnist = tf.keras.datasets.mnist(x_train, y_train),(x_test, y_test) = mnist.load_data()x_train, x_test = x_train / 255.0, x_test / 255.0model = tf.keras.models.Sequential([ tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(128, activation=&#x27;relu&#x27;), tf.keras.layers.Dropout(0.2), tf.keras.layers.Dense(10, activation=&#x27;softmax&#x27;)])model.compile(optimizer=&#x27;adam&#x27;, loss=&#x27;sparse_categorical_crossentropy&#x27;, metrics=[&#x27;accuracy&#x27;])model.fit(x_train, y_train, epochs=5)model.evaluate(x_test, y_test) 输出 输出很长，要花上一段时间，例如在GTX 1660Ti上花了一分钟。这个时候可以借机参考后面的监控GPU利用率的方法来检查显卡调用情况。 示例2在安装完成后，可以用下列Python语句验证TensorFlow是否可以连接到GPU，注意激活虚拟环境后再运行： 123import tensorflow as tftf.test.is_gpu_available()tf.config.list_physical_devices() 输出 12345678910111213142022-03-22 23:53:58.209067: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:922] could not open file to read NUMA node: /sys/bus/pci/devices/0000:02:00.0/numa_nodeYour kernel may have been built without NUMA support.2022-03-22 23:53:58.210941: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:922] could not open file to read NUMA node: /sys/bus/pci/devices/0000:02:00.0/numa_nodeYour kernel may have been built without NUMA support.2022-03-22 23:53:58.211774: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:922] could not open file to read NUMA node: /sys/bus/pci/devices/0000:02:00.0/numa_nodeYour kernel may have been built without NUMA support.2022-03-22 23:53:58.216025: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:922] could not open file to read NUMA node: /sys/bus/pci/devices/0000:02:00.0/numa_nodeYour kernel may have been built without NUMA support.2022-03-22 23:53:58.216161: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1609] Could not identify NUMA node of platform GPU id 0, defaulting to 0. Your kernel may not have been built with NUMA support.2022-03-22 23:53:58.217104: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:922] could not open file to read NUMA node: /sys/bus/pci/devices/0000:02:00.0/numa_nodeYour kernel may have been built without NUMA support.2022-03-22 23:53:58.217737: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1525] Created device /device:GPU:0 with 3954 MB memory: -&gt; device: 0, name: NVIDIA GeForce GTX 1660 Ti with Max-Q Design, pci bus id: 0000:02:00.0, compute capability: 7.5True[PhysicalDevice(name=&#x27;/physical_device:CPU:0&#x27;, device_type=&#x27;CPU&#x27;), PhysicalDevice(name=&#x27;/physical_device:GPU:0&#x27;, device_type=&#x27;GPU&#x27;)] Pytorch根据对应的CUdA版本安装对应的pytorch 官网：https://pytorch.org/ 下载pytorch 1pip install torch==1.7.1+cu110 torchvision==0.8.2+cu110 torchaudio===0.7.2 -f https://download.pytorch.org/whl/torch_stable.html 示例1代码 123import torchx = torch.rand(5,3)print(x) 输出 1tensor([[0.9943, 0.2830, 0.5508], [0.0765, 0.6474, 0.0059], [0.7241, 0.1868, 0.5398], [0.3217, 0.4664, 0.4242], [0.3351, 0.2482, 0.7371]]) 示例2代码 1torch.cuda.is_available() 输出为True即证明支持GPU了。 监控GPU利用率运行脚本时，可以在另一个shell 窗口中监控GPU利用率。 显卡名称在其中输入nvidia-smi -L命令，正常情况下应该可以显示出显卡的名称。 输出 1GPU 0: NVIDIA GeForce GTX 1660 Ti with Max-Q Design (UUID: GPU-aed9c4ba-c9b4-0910-6110-9236d882f851) 瞬时情况代码 1NVIDIA-smi 效果 123456789101112131415161718192021Tue Mar 22 22:38:35 2022+-----------------------------------------------------------------------------+| NVIDIA-SMI 510.52 Driver Version: 511.79 CUDA Version: 11.6 ||-------------------------------+----------------------+----------------------+| GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC || Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. || | | MIG M. ||===============================+======================+======================|| 0 NVIDIA GeForce ... On | 00000000:02:00.0 Off | N/A || 0% 41C P8 6W / N/A | 4412MiB / 6144MiB | 23% Default || | | N/A |+-------------------------------+----------------------+----------------------++-----------------------------------------------------------------------------+| Processes: || GPU GI CI PID Type Process name GPU Memory || ID ID Usage ||=============================================================================|| 0 N/A N/A 2400 C /python3.8 N/A || 0 N/A N/A 32447 G /Xwayland N/A |+-----------------------------------------------------------------------------+ 实时情况代码 1watch -n 5 NVIDIA-smi -a --display=utilization 效果 12345678910111213141516171819202122232425262728Every 5.0s: NVIDIA-smi -a --display=utilization DESKTOP-C18S314: Tue Mar 22 23:02:48 2022==============NVSMI LOG==============Timestamp : Tue Mar 22 23:02:48 2022Driver Version : 511.79CUDA Version : 11.6Attached GPUs : 1GPU 00000000:02:00.0 Utilization Gpu : 0 % Memory : 0 % Encoder : 0 % Decoder : 0 % GPU Utilization Samples Duration : Unknown Error Number of Samples : Unknown Error Max : Unknown Error Min : Unknown Error Avg : Unknown Error Memory Utilization Samples Duration : Unknown Error Number of Samples : Unknown Error Max : Unknown Error Min : Unknown Error Avg : Unknown Error ENC Utilization Samples 坑报错官方安装CUDA的方法好像不起效 报错12# 查看cuda是否安装成功nvcc -V 报错1234cd /usr/local/cuda/samples/4_Finance/BlackScholessudo make./BlackScholes# 好像是11.0可以这样 Reference 如何使用wsl2搭建基于Tensorflow GPU的深度学习环境？ - Lyle Chen的回答 - 知乎：https://www.zhihu.com/question/449808839/answer/2299274273 如何使用wsl2搭建基于Tensorflow GPU的深度学习环境？ - winson的回答 - 知乎：https://www.zhihu.com/question/449808839/answer/2389045278 win10的wsl2安装cuda并配置pytorch：https://zhuanlan.zhihu.com/p/350399229 windows10 + wsl2,使用NVIDIA gpu：https://blog.csdn.net/Tyronne/article/details/109319058","categories":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://fentaniao.github.io/categories/Deep-Learning/"}],"tags":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://fentaniao.github.io/tags/Deep-Learning/"},{"name":"wsl2","slug":"wsl2","permalink":"https://fentaniao.github.io/tags/wsl2/"}]},{"title":"Oracle中COMMIT的用法","slug":"Oracle-Database-Commit","date":"2022-03-16T04:19:00.000Z","updated":"2022-04-16T03:38:17.948Z","comments":true,"path":"2022/03/16/Oracle-Database-Commit/","link":"","permalink":"https://fentaniao.github.io/2022/03/16/Oracle-Database-Commit/","excerpt":"Oracle中COMMIT语句的用法","text":"Oracle中COMMIT语句的用法 COMMIT在Oracle中，COMMIT语句可以用来提交当前事务的所有更改。提交后，其他用户将能够看到您的更改。 SQL语言分类SQL语言分为五大类： DDL(数据定义语言) - Create、Alter、Drop 这些语句自动提交，无需用Commit提交。 DQL(数据查询语言) - Select 查询语句不存在提交问题。 DML(数据操纵语言) - Insert、Update、Delete 这些语句需要Commit才能提交。 DTL(事务控制语言) - Commit、Rollback 事务提交与回滚语句。 DCL(数据控制语言) - Grant、Revoke 授予权限与回收权限语句。 解释DDL 数据定义语言： create table 创建表 alter table 修改表 drop table 删除表 truncate table 删除表中所有行 create index 创建索引 drop index 删除索引 当执行DDL语句时，在每一条语句前后，oracle都将提交当前的事务。如果用户使用insert命令将记录插入到数据库后，执行了一条DDL语句(如create table)，此时来自insert命令的数据将被提交到数据库。当DDL语句执行完成时，DDL语句会被自动提交，不能回滚。 DML 数据操作语言： insert 将记录插入到数据库 update 修改数据库的记录 delete 删除数据库的记录 当执行DML命令如果没有提交，将不会被其他会话看到。除非在DML命令之后执行了DDL命令或DCL命令，或用户退出会话，或终止实例，此时系统会自动发出commit命令，使未提交的DML命令提交。","categories":[{"name":"SQL","slug":"SQL","permalink":"https://fentaniao.github.io/categories/SQL/"}],"tags":[]},{"title":"Oracle中如何创建和连接用户","slug":"Oracle-Database-Login","date":"2022-03-09T07:50:00.000Z","updated":"2022-04-16T03:38:17.950Z","comments":true,"path":"2022/03/09/Oracle-Database-Login/","link":"","permalink":"https://fentaniao.github.io/2022/03/09/Oracle-Database-Login/","excerpt":"Oracle中创建和连接用户的解决方案","text":"Oracle中创建和连接用户的解决方案 Datagrip中连接SYS用户1.配置oracle数据库用户连接信息 2.打开Advanced，给internal_logon加sysdba参数，如下图所示。 用户创建 首先获取SYSDBA权限 创建用户create user username identified by &#39;password&#39;; 用户授权首先获取SYSDBA权限，才能授权角色。 oracle为兼容以前版本，提供三种标准角色（role）：connect&#x2F;resource和dba。 三种标准角色：connect role(连接角色) 临时用户，特指不需要建表的用户，通常只赋予他们connect role. connect是使用oracle简单权限，这种权限只对其他用户的表有访问权限，包括select&#x2F;insert&#x2F;update和delete等。 拥有connect role 的用户还能够创建表、视图、序列（sequence）、簇（cluster）、同义词(synonym)、回话（session）和其他 数据的链（link） resource role(资源角色) 更可靠和正式的数据库用户可以授予resource role。 resource提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)。 dba role(数据库管理员角色) dba role拥有所有的系统权限 包括无限制的空间限额和给其他用户授予各种权限的能力。system由dba用户拥有 授权连接、资源权限语法： grant connect, resource to 用户名; 例子： grant connect, resource to newUsername; 授予表空间权限语法： grant unlimited tablespace to 用户名; 例子： grant unlimited tablespace to newUsername; 撤销连接、资源权限语法： revoke connect, resource from 用户名; 例子： revoke connect, resource from newUsername;","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"},{"name":"SQL","slug":"SQL","permalink":"https://fentaniao.github.io/categories/SQL/"}],"tags":[{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"},{"name":"DataGrip","slug":"DataGrip","permalink":"https://fentaniao.github.io/tags/DataGrip/"}]},{"title":"Oracle表空间数据文件重命名和修改路径时报错的解决方案","slug":"Oracle-Rename-Error","date":"2022-03-02T04:02:00.000Z","updated":"2022-03-10T02:04:19.427Z","comments":true,"path":"2022/03/02/Oracle-Rename-Error/","link":"","permalink":"https://fentaniao.github.io/2022/03/02/Oracle-Rename-Error/","excerpt":"在SQL Plus中对Oracle数据库表空间的数据文件进行重命名和修改路径时报错ORA-01511， ORA-01121， ORA-01110的解决办法","text":"在SQL Plus中对Oracle数据库表空间的数据文件进行重命名和修改路径时报错ORA-01511， ORA-01121， ORA-01110的解决办法 问题描述在对 Oracle 数据库文件进行重命名或修改路径时发生下面的错误 12345*第1行出现错误:ORA-01525: 重命名数据文件时出错ORA-01121: 无法重命名数据库文件 10 - 文件在使用中或在恢复中ORA-01110: 数据文件10: %需要重命名或修改路径的文件的路径% 解决方案步骤 以SYSTEM用户（只要具有可以修改数据文件的权限即可）登录数据库 将需要修改的表空间设置为离线（需要修改的数据文件属于该表空间） 手动先复制原数据文件到指定目录下，并重命名该文件 最后在SQL Plus中执行相关的修改操作 如需要对数据文件进行额外操作，需要及时将表空间再次设置为在线 样例实现目标将原数据文件&#39;Dir1\\example01.dbf&#39;（其对应表空间为example）重新命名并放置在新的路径下，成为新的数据文件&#39;Dir2\\example02.dbf&#39;。 代码123456ALTER TABLESPACE example OFFLINE NORMAL;-- 等待手动建立副本并手动重命名ALTER TABLESPACE example RENAME DATAFILE &#x27;Dir1\\example01.dbf&#x27; TO &#x27;Dir2\\example02.dbf&#x27;;ALTER TABLESPACE example ONLINE; 原理通过改变指针指向的方式（由旧文件改为指向具有新路径的新名字的副本）来避开文件占用的问题。 参考资料 坑向: 关于在Navicat中对Oracle数据库表空间的数据文件进行重命名和修改路径时报错ORA-01511,ORA-01121,ORA-01110的解决办法：https://blog.csdn.net/New_joined_lion/article/details/108973905?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscan&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscan","categories":[{"name":"SQL","slug":"SQL","permalink":"https://fentaniao.github.io/categories/SQL/"}],"tags":[]},{"title":"如何清除Git所有历史提交记录","slug":"Clear-Git-Commit","date":"2022-02-28T12:46:00.000Z","updated":"2022-03-10T02:04:19.412Z","comments":true,"path":"2022/02/28/Clear-Git-Commit/","link":"","permalink":"https://fentaniao.github.io/2022/02/28/Clear-Git-Commit/","excerpt":"如何彻底清除Git所有历史提交记录使其为“新”库。","text":"如何彻底清除Git所有历史提交记录使其为“新”库。 背景 以前开发中未制定、遵循 git 管理项目标准，随意(不规范)的提交 严重“污染了”提交历史，使开发主线 “脏乱”; 基于以前的仓库重新开发，这样可保留以前的配置等文件，但是需要删除全部的历史记录、tag、分支等; 由于自己或其他方面特殊需求，需要保留仓库的部分属性(创建时间，说明，主页等)，但需要清除历史记录，使其为“新库”。 基于以上3方面的需求，需要提供一个 在不删除原仓库的前提下，清除原仓库的所有历史提交记录(包含：分支、tag) 解决方案。 清除 git 所有历史提交记录方案1.创建新分支1git checkout --orphan &lt;new_branch&gt; 使用 --orphan 选项，可创建1个”清洁”分支(无任何的提交历史，但是当前分支的内容一应俱全。但严格意义上说，这样创建的分支还不是一个真正的分支，因为HEAD指向的引用中没有commit值，只有在进行一次提交后，它才算得上真正的分支。 注意新的分支名可以随意命名，但不能和以前的分支名冲突。这儿特别强调是因为很多人习惯默认将分支名创建为 main。 2.添加文件手动添加一个文件，如README.md 3.commit代码1git commit -m &quot;自定义提交说明&quot; 4.删除原来的主分支(master)1git branch -D main 一般仓库默认的主分支为 main分支，如果原来的主分支不是 main, 用实际的主分支名代替。 5.把当前分支重命名为main1git branch -m main 6.最后把代码推送到远程仓库注意有些仓库有 main分支保护，不允许强制 push，需要在远程仓库项目里暂时把项目保护关掉才能推送。 1git push -f origin main 注意推送前 需要使用git remote -v查看关联的远程仓库的信息（主要是远程库的别名）。虽然远程库的别名默认是 origin ，但你可能设置过其他的别名（而非 origin）。 推送前，有的情况需要设置：git branch --set-upstream-to=origin/main main。 参考资料彻底清除git所有历史提交记录使其为“新”库：https://blog.csdn.net/jhsword/article/details/107543884","categories":[{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/tags/Git/"}]},{"title":"Batch file include external file for variables","slug":"Batch-file-include-external-variables","date":"2022-02-26T09:26:00.000Z","updated":"2022-03-10T02:04:19.410Z","comments":true,"path":"2022/02/26/Batch-file-include-external-variables/","link":"","permalink":"https://fentaniao.github.io/2022/02/26/Batch-file-include-external-variables/","excerpt":"How to make a batch file to include an external file containing some variables (say configuration variables).","text":"How to make a batch file to include an external file containing some variables (say configuration variables). ote: I’m assuming Windows batch files as most people seem to be unaware that there are significant differences and just blindly call everything with grey text on black background DOS. Nevertheless, the first variant should work in DOS as well. Executable configurationThe easiest way to do this is to just put the variables in a batch file themselves, each with its own set statement: 123set var1=value1set var2=value2... and in your main batch: 1call config.cmd Of course, that also enables variables to be created conditionally or depending on aspects of the system, so it’s pretty versatile. However, arbitrary code can run there and if there is a syntax error, then your main batch will exit too. In the UNIX world this seems to be fairly common, especially for shells. And if you think about it, autoexec.bat is nothing else. Key&#x2F;value pairsAnother way would be some kind of var&#x3D;value pairs in the configuration file: 123var1=value1var2=value2... You can then use the following snippet to load them: 1for /f &quot;delims=&quot; %%x in (config.txt) do (set &quot;%%x&quot;) This utilizes a similar trick as before, namely just using set on each line. The quotes are there to escape things like &lt;, &gt;, &amp;, |. However, they will themselves break when quotes are used in the input. Also you always need to be careful when further processing data in variables stored with such characters. Generally, automatically escaping arbitrary input to cause no headaches or problems in batch files seems pretty impossible to me. At least I didn’t find a way to do so yet. Of course, with the first solution you’re pushing that responsibility to the one writing the config file. Reference Batch file include external file for variables: https://stackoverflow.com/questions/2763875/batch-file-include-external-file-for-variables","categories":[{"name":"bash","slug":"bash","permalink":"https://fentaniao.github.io/categories/bash/"}],"tags":[{"name":"bash","slug":"bash","permalink":"https://fentaniao.github.io/tags/bash/"}]},{"title":"Oracle数据库安装的解决方案","slug":"Oracle-Database-Install","date":"2022-02-23T08:09:00.000Z","updated":"2022-03-10T02:04:19.424Z","comments":true,"path":"2022/02/23/Oracle-Database-Install/","link":"","permalink":"https://fentaniao.github.io/2022/02/23/Oracle-Database-Install/","excerpt":"本文收集了Oracle数据库的安装、SQL Plus的登录和DataGrip配置问题的解决方案。","text":"本文收集了Oracle数据库的安装、SQL Plus的登录和DataGrip配置问题的解决方案。 安装教程 安装Oracle教程1：https://www.modb.pro/db/38320 安装Oracle教程2：https://blog.csdn.net/JJJikerUPUP/article/details/90576554 账号密码 SQL Plus快速入门：https://docs.oracle.com/cd/B14117_01/server.101/b12170/qstart.htm 用户名和密码：https://docs.oracle.com/cd/B14117_01/server.101/b12170/ch4.htm#i1142498 DataGripsh设置 DataGrip连接Oracle：https://www.cnblogs.com/HUCHEN/p/9943625.html DataGrip通过外部工具调用SQL Plus：https://www.jetbrains.com/help/datagrip/using-database-cli-tools.html#step_1_create_an_external_tool_configuration 小工具 在线SQL Plus：https://livesql.oracle.com 卸载 卸载Oracle1：https://blog.csdn.net/Ninewind/article/details/89520400 卸载Oracle2：https://zhuanlan.zhihu.com/p/31801927","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"},{"name":"SQL","slug":"SQL","permalink":"https://fentaniao.github.io/categories/SQL/"}],"tags":[{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"},{"name":"DataGrip","slug":"DataGrip","permalink":"https://fentaniao.github.io/tags/DataGrip/"}]},{"title":"如何创建Beamer样式模板","slug":"beamer-template","date":"2022-02-06T15:49:00.000Z","updated":"2022-03-10T02:04:19.430Z","comments":true,"path":"2022/02/06/beamer-template/","link":"","permalink":"https://fentaniao.github.io/2022/02/06/beamer-template/","excerpt":"如何创作一个Beamer模板，包括如何修改常用元素的主题。","text":"如何创作一个Beamer模板，包括如何修改常用元素的主题。 前言本文是对The beamer class Manual for version 3.06内容的重构。 主要内容集中在如何创作一个Beamer模板，包括如何修改常用元素的主题。 您可以通过以下链接访问原文：https://www.docin.com/p-1206582079.html?qq-pf-to=pcqq.c2c 主题主题其实包含主题（beamerthemexxx.sty）、内主题(beamerinnerthemexxx.sty)、外主题(beamerouterthemexxx.sty)、字体主题(beamerfontthemexxx.sty)、颜色主题(beamercolorthemexxx.sty)五个部分，分放在五个sty文件中，写完这五个 sty 文件，再在你的文档中，使用usetheme&#123;xxx&#125;，将你创作的主体包含进来即可。 引自https://lusongno1.blog.csdn.net/article/details/83009395 以上的话说的比较简洁，其实情况为：Color Theme只决定了颜色，Font Themes只决定了字体，Inner Themes决定了Frame环境下内部的枚举环境，块环境，定义环境，定理环境等样式，Outer Themes决定了frame中上下栏，左右侧栏，导航栏等元素的样式。 而Presentation theme包含了以上所有四个内容，但是这四个内容可以相互独立替换。所以最好的情况是给出这五个文件，这样人家可以使用你的主题，也可以在使用别的主题的时候单独使用你的字体样式，或者别的样式 内主题内主题包含以下9种元素的样式： title 标题，enumerate 有序枚举，itemize 无序枚举，block 块，description 描述环境，proof和theorem 证明和定理，graphic和table 图片和表格，footnote 脚注，bib 引用 无序列举\\setbeamertemplate&#123;itemize items&#125;&#123;\\color&#123;red&#125;$\\bullet$&#125; 有序列举具体见颜色的设置 块 显示圆角矩形：\\setbeamertemplate&#123;blocks&#125;[rounded] 显示阴影：\\setbeamertemplate&#123;blocks&#125;[rounded][shadow=true] 外主题外主题包含了以下元素的样式：上下栏，侧栏，logo，frame title 上栏使用\\setbeamertemplate&#123;headline&#125;&#123;&#125; 插入导航条： \\insertsectionnavigationhorizontal&#123;宽度&#125;&#123;左侧文字&#125;&#123;右侧文字&#125;：样式为水平的导航条，显示所有section，高亮当前section，宽度为导航条宽度，尽量不要太大。左右侧文字是你希望插入在每一个section旁边的符号。 我发现一个问题：使用\\setbeamercolor&#123;headline&#125;&#123;fg=,bg=&#125;的方式，改变的是高亮和常规的颜色，而不是headline背景的颜色，这个问题还是没有解决。 \\insertsectionnavigation&#123;宽度&#125;：这个导航栏是竖直的，不建议使用。 还可以插入作者，机构之类的，但是不常用。 logo 导入logo图案：\\logo&#123;\\includegraphics[height=0.5cm]&#123;logo.pdf&#125;&#125; 插入logo：\\insertlogo inserts 字体主题字体主题字体主题包含了所有元素的字体的大小和样式 \\setbeamerfont&#123;名字&#125;&#123;选项&#125; 参数：名字是指定的元素，比如block，frametitle一类的。 选项： size: 字体的大小 series: 字体的样式，\\bfseries 加粗 shape: \\itshape 斜体，\\slshape 伪斜体, \\scshape 小型大写, \\upshape 直立 family: 字体的格式 此图引自：https://blog.csdn.net/y11235816/article/details/91048416 字号命令 对应字号\\script 六号\\footnotesize 小五\\small 五号\\nomalsize 小四\\large 四号\\Large 三号\\LARGE 二号\\huge 一号\\Huge 小初\\HUGE 初号 以下内容引自：https://www.cnblogs.com/LitBro/p/12074820.html 字体导言区使用\\usepackage &#123;ctex&#125; 字体 使用方式 另一种使用方式宋体 \\songti \\CJKfamily{zhsong}黑体 \\heiti \\CJKfamily{zhhei}仿宋 \\fangsong \\CJKfamily{zhfs}楷书 \\kaishu \\CJKfamily{zhkai}隶书 \\lishu \\CJKfamily{zhli}圆体 \\youyuan \\CJKfamily{zhyou}微软雅黑 \\yahei \\CJKfamily{zhyahei} 比如想设置标题为楷书，则使用：\\setbeamerfont{title}{family&#x3D;\\heiti} 颜色主题颜色主题包含了所有元素的前景（字体颜色）和背景 字体颜色的设置命令：\\setbeamercolor{名字}{选项} 该命令有两种用途，可以对一个颜色进行命名，可以设置一个元素的颜色 参数： 名字：元素的名字或者颜色的名字，颜色的名字自己取，可以包含空格 选项： fg&#x3D;color: 前景色 bg&#x3D;color: 背景色 parent&#x3D;{A,B}: 表示当前样式是样式A和样式B的叠加 颜色使用xcolor的方式书写，下图引自: https://blog.csdn.net/weixin_29657201/article/details/78161537 或者用red!50表示50%的红色，用 颜色!数字!颜色 表示百分之多少的前一种颜色和后一种颜色混合beamer中字体使用fg改变颜色，背景使用bg改变颜色 主要可以改变fg和bg的是footline 页脚，headline 页眉，sidebar 侧边栏，frametitle 页标题，navigation 导航栏，title标题，block body 块，block title 块标题，normal text 内环境外的字体 alert text 显著字体， section in toc，ciber 侧栏，enumerate body：有序枚举 主要可以改变fg的是：author，institute，date，subject 主要可以改变bg的是：background canvas 参考资料如何创建Beamer样式模板：https://blog.csdn.net/HGGshiwo/article/details/113774758","categories":[{"name":"LaTeX","slug":"LaTeX","permalink":"https://fentaniao.github.io/categories/LaTeX/"}],"tags":[{"name":"LaTeX","slug":"LaTeX","permalink":"https://fentaniao.github.io/tags/LaTeX/"},{"name":"Beamer","slug":"Beamer","permalink":"https://fentaniao.github.io/tags/Beamer/"}]},{"title":"多台电脑共用SSH Key","slug":"Share-SSH-Key","date":"2022-02-05T10:06:00.000Z","updated":"2022-03-10T02:04:19.429Z","comments":true,"path":"2022/02/05/Share-SSH-Key/","link":"","permalink":"https://fentaniao.github.io/2022/02/05/Share-SSH-Key/","excerpt":"实现SSH Public&#x2F;Private Key的在多台电脑中的共用。","text":"实现SSH Public&#x2F;Private Key的在多台电脑中的共用。 步骤我们给旧的MBP起名叫OLD, 新的叫NEW，方面后面区分 拷贝文件拷贝OLD上的id_rsa和id_rsa.pub到云端&#x2F;U盘&#x2F;邮箱&#x2F;…中备份。这两个文件位于用户目录下的隐藏文件夹~&#x2F;.ssh&#x2F;中。 生成SHH Key在NEW的终端(Terminal)上执行 123git config [--global] user.name &quot;[name]&quot; //请保持和以前一样git config [--global] user.email &quot;[email address]&quot;ssh-keygen -t rsa 这样会在NEW的~&#x2F;.ssh&#x2F;中生成新的id_rsa和id_rsa.pub。 覆盖文件用备份好的OLD中的id_rsa和id_rsa.pub文件，覆盖NEW上对应的文件 鉴权确保NEW上的两个文件的权限是正确的 id_rsa是600，id_rsa.pub是644，比如： 12-rw------- 1 fancy fancy 1675 2013-03-19 12:55 id_rsa-rw-r--r-- 1 fancy fancy 406 2013-03-19 12:55 id_rsa.pub SSH登陆的原理接下来说一下SSH登陆的原理，就可以让我们弄明白这种共用Key的方法的由来。 什么是SSHSSH是一种网络协议，用于计算机之间的加密通信。 公钥Public Key与私钥Private KeySSH需要生成公钥Public Key和私钥Private Key, 常用的是使用RSA算法生成id_rsa.pub和id_rsa。公钥Public Key(id_rsa.pub)是可以暴露在网络传输上的，是不安全的。而私钥Private Key(id_rsa)是不可暴露的，只能存在客户端本机上。 所以公钥Public Key(id_rsa.pub)的权限是644，而私钥Private Key(id_rsa)的权限只能是600。如果权限不对，SSH会认为公钥Public Key(id_rsa.pub)和私钥Private Key(id_rsa)是不可靠的，就无法正常使用SSH登陆了。 同时在服务端会有一个~&#x2F;.ssh&#x2F;authorized_keys文件，里面存放了多个客户端的公钥Public Key(id_rsa.pub)，就表示拥有这些Public Key的客户端就可以通过SSH登陆服务端。 SSH公钥登陆过程 客户端发出公钥登陆的请求(ssh user@host) 服务端返回一段随机字符串 客户端用私钥Private Key(id_rsa)加密这个字符串，再发送回服务端 服务端用~&#x2F;.ssh&#x2F;authorized_keys里面存储的公钥Public Key去解密收到的字符串。如果成功，就表明这个客户端是可信的，客户端就可以成功登陆 由此可见，只要多台电脑上的的公钥Public Key(id_rsa.pub)和私钥Private Key(id_rsa)是一样的，对于服务端来说着其实就是同一个客户端。所以可以通过复制公钥Public Key(id_rsa.pub)和私钥Private Key(id_rsa)到多台电脑来实现共享登陆。 这里也需要强调的是，一定要确保公钥Public Key(id_rsa.pub)和私钥Private Key(id_rsa)的安全，不要随意乱扔，乱扔它会污染环境，砸到小朋友怎么办？就算砸不到小朋友砸到花花草草也不好嘛！Keep SSH Public&#x2F;Private Keys Safe","categories":[{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/tags/Git/"}]},{"title":"C++中将变量名作为字符串传递的解决方案","slug":"Cpp-pass-variable-name-as-string","date":"2021-10-20T06:12:00.000Z","updated":"2023-03-16T07:43:51.538Z","comments":true,"path":"2021/10/20/Cpp-pass-variable-name-as-string/","link":"","permalink":"https://fentaniao.github.io/2021/10/20/Cpp-pass-variable-name-as-string/","excerpt":"在C++中，如何将变量名作为字符串传递的解决方案","text":"在C++中，如何将变量名作为字符串传递的解决方案 英文版本（点击此处查看或下载）中文版本（点击此处查看或下载）","categories":[{"name":"C++","slug":"C","permalink":"https://fentaniao.github.io/categories/C/"}],"tags":[]},{"title":"CMake Configuration","slug":"CMake-Configuration","date":"2021-10-19T12:48:00.000Z","updated":"2022-03-10T02:04:19.411Z","comments":true,"path":"2021/10/19/CMake-Configuration/","link":"","permalink":"https://fentaniao.github.io/2021/10/19/CMake-Configuration/","excerpt":"这是CMake设置的模板。","text":"这是CMake设置的模板。 CMake Configuration[TOC] 开头设置123456#cmake_minimum_requiredcmake_minimum_required(VERSION 3.20)#项目名称project(#项目名称)#CMAKE版本set(CMAKE_CXX_STANDARD 14) 添加支持完全支持支持多文件分别编译运行：项目根目录下所有的 .cpp 文件12345678910111213#支持多文件分别编译运行message(&quot;&lt;&lt; Support exes: &quot;)#遍历项目根目录下所有的 .cpp 文件#要求所有cpp文件命名不重复，不能含有中文，不能含有‘/’等字符file(GLOB_RECURSE files *.cpp)foreach (file $&#123;files&#125;) #获取文件名 string(REGEX REPLACE &quot;.+/(.+)\\\\..*&quot; &quot;\\\\1&quot; exe $&#123;file&#125;) #添加 add_executable($&#123;exe&#125; $&#123;file&#125;) #发送完成消息 message(\\ \\ \\ \\ --\\ src/$&#123;exe&#125;.cpp\\ will\\ be\\ compiled\\ to\\ bin/$&#123;exe&#125;)endforeach () 支持多文件分别编译运行和GTest：项目根目录下所有的 .cpp 文件123456789101112131415161718192021222324252627#支持多文件分别编译运行和GTestmessage(&quot;&lt;&lt; Support exes &amp; GTest: &quot;)set(googleTestDir ./googletest)#Add the google test subdirectoryadd_subdirectory($&#123;googleTestDir&#125;)#include googletest/include dirinclude_directories($&#123;googleTestDir&#125;/googletest/include)#include the googlemock/include dirinclude_directories($&#123;googleTestDir&#125;/googlemock/include)#搜索路径下的文件并添加至列表list，列表名为SOURCE_FILEfile(GLOB_RECURSE files *.cpp)#遍历项目根目录下所有的 .cpp 文件#要求所有cpp文件命名不重复，不能含有中文，不能含有‘/’等字符foreach (file $&#123;files&#125;) #从绝对路径中获取相对路径 file(RELATIVE_PATH path &quot;$&#123;CMAKE_BINARY_DIR&#125;&quot; &quot;$&#123;file&#125;&quot;) #获取文件名 string(REGEX REPLACE &quot;.+/(.+)\\\\..*&quot; &quot;\\\\1&quot; exe $&#123;path&#125;) #添加 add_executable($&#123;exe&#125; $&#123;path&#125;) target_link_libraries($&#123;exe&#125; gtest gtest_main) target_link_libraries($&#123;exe&#125; gmock gmock_main) #发送完成消息 message(\\ \\ \\ \\ --\\ src/$&#123;exe&#125;.cpp\\ will\\ be\\ compiled\\ to\\ bin/$&#123;exe&#125;)endforeach () 功能支持支持GTest：仅连接list中的 .cpp 文件12345678910111213141516171819202122#支持GTestmessage(&quot;&lt;&lt; Support GTest: &quot;)set(googleTestDir ./googletest)#Add the google test subdirectoryadd_subdirectory($&#123;googleTestDir&#125;)#include googletest/include dirinclude_directories($&#123;googleTestDir&#125;/googletest/include)#include the googlemock/include dirinclude_directories($&#123;googleTestDir&#125;/googlemock/include)#仅连接list中的 .cpp 文件#list(APPEND SOURCE_FILE# test.cpp# search/hashSearch.cpp# )#add_executable(GTest $&#123;SOURCE_FILE&#125;)## Link with GoogleTest#target_link_libraries(GTest gtest gtest_main)##Link with GoogleMock#target_link_libraries(GTest gmock gmock_main) 添加目录12#添加目录include_directories(.)","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"},{"name":"C++","slug":"C","permalink":"https://fentaniao.github.io/categories/C/"}],"tags":[{"name":"Jetbrains","slug":"Jetbrains","permalink":"https://fentaniao.github.io/tags/Jetbrains/"},{"name":"Clion","slug":"Clion","permalink":"https://fentaniao.github.io/tags/Clion/"},{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"}]},{"title":"CMakeLists.txt格式和.h头文件的格式","slug":"Cpp-format","date":"2021-10-19T12:48:00.000Z","updated":"2022-03-10T02:04:19.413Z","comments":true,"path":"2021/10/19/Cpp-format/","link":"","permalink":"https://fentaniao.github.io/2021/10/19/Cpp-format/","excerpt":"本文介绍CMakeLists.txt的格式和.h头文件的格式。","text":"本文介绍CMakeLists.txt的格式和.h头文件的格式。 CMakeLists.txt12345678910111213141516171819202122#声明要求的cmake最低版本cmake_minimum_required( VERSION 2.8 )#声明一个cmake工程project( HelloSLAM )#添加一个可执行程序#语法：add_executable( 程序名 源代码文件 ）add_executable( helloSLAM helloSLAM.cpp )#添加一个库#语法：add_library( 库名称 源代码文件 ），会生成 lib库名称.a（静态库）#语法：add_library( 库名称 SHARED 源代码文件 ），会生成 lib库名称.so （共享库）add_library( hello libHelloSLAM.cpp )#将可执行程序链接到库#语法：target_link_libraries ( 程序名 库名称 ）target_link_libraries ( helloSLAM hello )#指定头文件目录#以eigen为例，eigen的头文件目录为&quot;/usr/include/eigen3&quot;include_directories( &quot;/usr/include/eigen3&quot; ) .h head file123456/*源文件为libHelloSLAM.cpp的头文件libHelloSLAM.h*/#ifndef LIBHELLOSLAM_H_#define LIBHELLOSLAM_H_/*源文件中定义的函数名称*/void printHello();#endif 参考资料CMakeLists.txt和.h头文件：https://blog.csdn.net/qq_38329197/article/details/86500071","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"},{"name":"C++","slug":"C","permalink":"https://fentaniao.github.io/categories/C/"}],"tags":[{"name":"Clion","slug":"Clion","permalink":"https://fentaniao.github.io/tags/Clion/"},{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"}]},{"title":"Useful Plugins for JetBrains IDE","slug":"Plugins-List","date":"2021-10-19T12:48:00.000Z","updated":"2023-03-16T06:57:50.262Z","comments":true,"path":"2021/10/19/Plugins-List/","link":"","permalink":"https://fentaniao.github.io/2021/10/19/Plugins-List/","excerpt":"Why these 5 JetBrains IDE plugins should be on your radar?","text":"Why these 5 JetBrains IDE plugins should be on your radar? Essential Plugins for JetBrains IDEAs a programmer, productivity is key to my success. One thing that can slow me down is manually formatting and locating code blocks in my code. Fortunately, JetBrains IDE has some amazing plugins that can make programming easier and more enjoyable. In this post, I’m going to recommend some essential plugins that I believe every programmer should have. 1. Indent RainbowIndent Rainbow helps to identify indent levels by adding different colors to each level. This makes it easier for developers to locate code blocks visually. The plugin supports popular languages such as Java, Kotlin, and Scala. If you’re working on a project with a lot of nested code, Indent Rainbow is a must-have. 2. Rainbow BracketsRainbow Brackets is another plugin that makes programming easier. It adds different colors to the brackets and braces in your code, making it easier to identify matched pairs. This plugin helps developers avoid syntax errors and makes code more readable. If you’re tired of manually identifying matching brackets, Rainbow Brackets will save you time and frustration. 3. Rainbow CSVRainbow CSV provides color highlighting for CSV files. It helps developers easily identify and navigate through tabular data. This plugin is particularly useful when working with large CSV files that can be hard to read. Rainbow CSV supports sorting, filtering, and searching data within the file, making it easier to organize your data. 4. Key Promoter XKey Promoter X is a plugin that helps developers memorize keyboard shortcuts. Whenever you use the mouse to perform a task that has a shortcut, Key Promoter X will inform you and suggest the shortcut. This plugin is particularly useful for new developers who are still learning keyboard shortcuts. As you get used to the shortcuts, you’ll find yourself working more efficiently and quickly. 5. EduToolsFinally, EduTools is a plugin designed for education purposes. It provides various tools that help students and instructors learn and teach programming. The plugin offers exercises for various languages, which can be customized to suit different levels of difficulty. EduTools also has support for IDEs such as IntelliJ IDEA, PyCharm, and WebStorm. If you’re looking to improve your programming skills, EduTools is a great tool. In conclusion, JetBrains IDE has some amazing plugins that can make programming easier and more enjoyable. These plugins include Indent Rainbow, Rainbow Brackets, Rainbow CSV, Key Promoter X, and EduTools. If you’re a developer using JetBrains IDE, I highly recommend that you give these plugins a try. They’ll help you improve your productivity, avoid common syntax errors, and become a more efficient programmer.","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"}],"tags":[{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"},{"name":"Plugins","slug":"Plugins","permalink":"https://fentaniao.github.io/tags/Plugins/"}]},{"title":"Debug with GDB","slug":"gdb-debug","date":"2021-10-17T15:49:00.000Z","updated":"2023-03-16T07:16:34.998Z","comments":true,"path":"2021/10/17/gdb-debug/","link":"","permalink":"https://fentaniao.github.io/2021/10/17/gdb-debug/","excerpt":"Debugging C++ Code with GDB in Clion","text":"Debugging C++ Code with GDB in Clion Debugging is an essential part of the software development process. Finding and fixing bugs can be a challenging task, especially when dealing with large codebases. Luckily, there are tools available that can make this process more manageable. One such tool is GDB, a powerful and flexible debugger that can help you track down and fix issues in your C++ code. In this blog post, we will explore how to use GDB to debug C++ code in Clion. What is GDB?GDB (GNU Debugger) is a command-line debugger that allows you to examine and modify the state of a running program. It is particularly useful for debugging C and C++ programs, as it can help you find memory errors, race conditions, and other issues that can cause your code to crash or behave unexpectedly. GDB provides a range of features, including breakpoints, watchpoints, and the ability to inspect memory and registers. With these tools, you can step through your code line by line, examining the values of variables and data structures as you go. Setting up GDB in ClionClion is a popular Integrated Development Environment (IDE) for C++ programmers, and it provides built-in support for GDB debugging. To use GDB in Clion, you will need to configure your project settings to enable debugging. Here’s how to do it: Open your C++ project in Clion. Click on “Run” in the main menu, then select “Edit Configurations…” In the “Run&#x2F;Debug Configurations” window, click on the “+” icon and select “GDB Remote Debug” from the list. Enter a name for your configuration (e.g., “Debug”), then configure the following settings: Target: Select the executable file that you want to debug. Host: Leave this set to “localhost” unless you are debugging on a remote machine. Port: Enter the port number that GDB should use to communicate with the debugger. The default is 1234. Debugger: Select “GDB” from the list. GDB debugger path: Enter the path to your GDB executable. This should be the path to the GDB binary file on your system. GDB command set: Leave this set to “mi”. GDB startup commands: You can enter any additional GDB commands that you want to run when the debugger starts up. For example, you might want to set a breakpoint at a specific function or line of code. Click “OK” to save your configuration. Debugging with GDBNow that you have set up your project to use GDB, you can start debugging your code. Here are some basic steps to get you started: Set a breakpoint: Click on the line number in your code where you want to set a breakpoint. A red circle will appear next to the line number to indicate that a breakpoint has been set. Start the debugger: Click on the “Debug” button in the main toolbar to start the debugger. This will launch your program and pause execution at the first breakpoint that is encountered. Examine variables: While your program is paused, you can examine the values of variables and data structures by hovering your mouse over them or by clicking on them in the “Variables” window. Step through your code: Use the “Step Over” and “Step Into” buttons to step through your code line by line. The “Step Over” button will execute the current line of code and move to the next line, while the “Step Into” button will move into any function calls that are encountered. Continue execution","categories":[{"name":"C++","slug":"C","permalink":"https://fentaniao.github.io/categories/C/"}],"tags":[{"name":"Clion","slug":"Clion","permalink":"https://fentaniao.github.io/tags/Clion/"},{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"}]},{"title":"All JetBrains IDEs are not responding properly to touch and Surface Pen input.","slug":"Surface-Pen","date":"2021-10-17T01:01:07.000Z","updated":"2023-03-16T07:06:12.976Z","comments":true,"path":"2021/10/17/Surface-Pen/","link":"","permalink":"https://fentaniao.github.io/2021/10/17/Surface-Pen/","excerpt":"All JetBrains IDEs are not responding properly to touch and Surface Pen input.","text":"All JetBrains IDEs are not responding properly to touch and Surface Pen input. SolutionSolution 1: Add to IDE In the IDE, select “Help-Edit Custom VM Options” Add &quot; -Dcom.jetbrains.default.touchscreen.mode=true&quot; Solution 2: Add ManuallyExample of configuration file location: C:\\Users\\username\\AppData\\Local\\JetBrains\\Toolbox\\apps\\IDEA-U\\ch-0\\212.5284.40.vmoptions ReferencesPyCharm Community Edition 2020.1: Surface Pen not responding on Surface Pro tablets: https://youtrack.jetbrains.com/issue/JBR-2490","categories":[{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/categories/Surface/"},{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"}],"tags":[{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/tags/Surface/"},{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"}]},{"title":"Clion Failed to Kill Process","slug":"Clion-cannot-kill-process","date":"2021-10-10T14:28:07.000Z","updated":"2023-03-16T07:42:44.802Z","comments":true,"path":"2021/10/10/Clion-cannot-kill-process/","link":"","permalink":"https://fentaniao.github.io/2021/10/10/Clion-cannot-kill-process/","excerpt":"When running a C++ program with Clion, even if you click the stop button, you may find that the program is still running and has not been killed when you open the task manager. Sometimes, if a program has an infinite loop, it will consume memory and eventually require a restart.","text":"When running a C++ program with Clion, even if you click the stop button, you may find that the program is still running and has not been killed when you open the task manager. Sometimes, if a program has an infinite loop, it will consume memory and eventually require a restart. SolutionSolution 1Some people have had this problem in the JetBrains community: https://intellij-support.jetbrains.com/hc/en-us/community/posts/206620039-Clion-IDE-not-killing-processes-. Also on Stack Overflow: https://stackoverflow.com/questions/51169357/unable-to-catch-sigint-sent-by-clion. Their solution is to press shift+ctrl+A , then type Registry find run.processes.with.pty, and turn it off, or do it like this, **(Help -&gt; Find Action -&gt; Registry…)**。 But the strange thing is that this setting cannot be saved and will remain on when you reopen Clion. Solution 2I found a solution to save this setting on Zhihu: https://www.zhihu.com/question/50971066/answer/198448875 Create an idea.properties file in the .CLion2017.3\\config folder with the following contents: run.processes.with.pty=false. .CLion2017.3\\config is generally under the user folder on the C drive.","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"}],"tags":[{"name":"Clion","slug":"Clion","permalink":"https://fentaniao.github.io/tags/Clion/"},{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"}]},{"title":"Attention for MS Wireless Display Adapter","slug":"Attention-For-Microsoft-Wireless-Display-Adapter","date":"2021-05-24T11:24:00.000Z","updated":"2022-03-10T02:04:19.409Z","comments":true,"path":"2021/05/24/Attention-For-Microsoft-Wireless-Display-Adapter/","link":"","permalink":"https://fentaniao.github.io/2021/05/24/Attention-For-Microsoft-Wireless-Display-Adapter/","excerpt":"Attention for Microsoft Wireless Display Adapter.","text":"Attention for Microsoft Wireless Display Adapter. Instruments Surface Book 3 &#x3D;&#x3D;充电宝或其他能通过USB提供电力的设备（为无线投屏适配器提供电力）&#x3D;&#x3D; 微软无线投屏适配器 HDMI母对母转接头 Workflow 123456graph TD; Pre[提前打开所需文件的文件夹]--&gt; A[无线投屏适配器连接HDMI端口和USB接口]--&gt;B[在Surface Book 上关闭平板模式和自动旋转]; B--&gt;C[连接无线投屏适配器]; C--&gt;D[拔起Surface Book] D--&gt;E[启动所需软件和文件]","categories":[{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/categories/Surface/"}],"tags":[{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/tags/Surface/"}]}],"categories":[{"name":"SQL","slug":"SQL","permalink":"https://fentaniao.github.io/categories/SQL/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://fentaniao.github.io/categories/Deep-Learning/"},{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"},{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/categories/Git/"},{"name":"bash","slug":"bash","permalink":"https://fentaniao.github.io/categories/bash/"},{"name":"LaTeX","slug":"LaTeX","permalink":"https://fentaniao.github.io/categories/LaTeX/"},{"name":"C++","slug":"C","permalink":"https://fentaniao.github.io/categories/C/"},{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/categories/Surface/"}],"tags":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://fentaniao.github.io/tags/Deep-Learning/"},{"name":"wsl2","slug":"wsl2","permalink":"https://fentaniao.github.io/tags/wsl2/"},{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"},{"name":"DataGrip","slug":"DataGrip","permalink":"https://fentaniao.github.io/tags/DataGrip/"},{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/tags/Git/"},{"name":"bash","slug":"bash","permalink":"https://fentaniao.github.io/tags/bash/"},{"name":"LaTeX","slug":"LaTeX","permalink":"https://fentaniao.github.io/tags/LaTeX/"},{"name":"Beamer","slug":"Beamer","permalink":"https://fentaniao.github.io/tags/Beamer/"},{"name":"Jetbrains","slug":"Jetbrains","permalink":"https://fentaniao.github.io/tags/Jetbrains/"},{"name":"Clion","slug":"Clion","permalink":"https://fentaniao.github.io/tags/Clion/"},{"name":"Plugins","slug":"Plugins","permalink":"https://fentaniao.github.io/tags/Plugins/"},{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/tags/Surface/"}]}