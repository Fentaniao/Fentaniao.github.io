{"meta":{"title":"Knowledge Base","subtitle":"","description":"the Knowledge Base of Fentaniao","author":"Fentaniao","url":"https://fentaniao.github.io","root":"/"},"pages":[{"title":"404","date":"2022-03-10T02:04:19.408Z","updated":"2022-03-10T02:04:19.408Z","comments":true,"path":"404.html","permalink":"https://fentaniao.github.io/404.html","excerpt":"","text":"你要访问的页面不存在，去别的页面逛逛吧！"},{"title":"","date":"2022-03-10T02:04:19.480Z","updated":"2022-03-10T02:04:19.480Z","comments":true,"path":"about.html","permalink":"https://fentaniao.github.io/about.html","excerpt":"","text":"关于这是Fentaniao打造的技术博客，我把它称为我的知识库（Knowledge Base）。 知识库是什么？知识库是用于创建公共或私有知识库、帮助中心、文档、手册等的工具。它可以设置为客户的自助服务中心。它也可以设置为私有，以便团队可以轻松协作和共享业务知识。 知识库的最终目的是使人们能够轻松地自行解决问题而无需寻求帮助。知识库既可以通过有组织的目录提供结构化知识，也可以提供将用户引导至最相关文章的可搜索内容。 知识库讨论什么？ 学习代码和开发相关项目时遇到问题的解决方案。 我是Microsoft Surface的忠实用户，数码产品的爱好者，所以这里讨论关于数码产品的相关知识，特别是Microsoft产品的使用。 我在Windows 11和Windows Subsystem Linux(WSL)平台上生活、学习和工作，所以这里也讨论包括Windows OS，Linux OS的使用。 我同时也是Windows Insider 和Microsoft Developer，我使用来自JetBrains、Microsoft、MathWorks、Adobe等公司的产品开发我的项目，所以这里也讨论相关软件的配置和使用。 本项目的实现查看本项目的自述文件以了解本项目的实现和部署。 ContactAuthor: Fentaniao Email: &#102;&#x65;&#110;&#116;&#x61;&#110;&#x69;&#97;&#x6f;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109; Website: https://fentaniao.github.io LicenseBased on Hexo &amp; Nexmoe. GPL-3.0 License © Fentaniao"},{"title":"文章归档","date":"2022-03-10T02:04:19.481Z","updated":"2022-03-10T02:04:19.481Z","comments":true,"path":"archive.html","permalink":"https://fentaniao.github.io/archive.html","excerpt":"","text":""},{"title":"","date":"2022-03-10T02:04:19.498Z","updated":"2022-03-10T02:04:19.498Z","comments":true,"path":"projects.html","permalink":"https://fentaniao.github.io/projects.html","excerpt":"","text":"Overview 👋 Hi, I’m @Fentaniao. 🔭 I’m currently working on the Dynamics of Covid-19 though the differential equations. 👀 I’m interested in coding, math, movies. I record my technical notes in https://fentaniao.github.io. 🌱 I’m currently learning developing WinUI 3 software, inertial navigation… 📫 Reach me through GitHub or &#x66;&#x65;&#110;&#x74;&#x61;&#110;&#x69;&#x61;&#x6f;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#99;&#x6f;&#x6d;. Languages Tools Platforms Projects"}],"posts":[{"title":"Oracle中如何创建和连接用户","slug":"Oracle-Database-Login","date":"2022-03-09T07:50:00.000Z","updated":"2022-03-10T02:04:19.425Z","comments":true,"path":"2022/03/09/Oracle-Database-Login/","link":"","permalink":"https://fentaniao.github.io/2022/03/09/Oracle-Database-Login/","excerpt":"Oracle中创建和连接用户的解决方案","text":"Oracle中创建和连接用户的解决方案 Datagrip中连接SYS用户1.配置oracle数据库用户连接信息 2.打开Advanced，给internal_logon加sysdba参数，如下图所示。 用户创建 首先获取SYSDBA权限 创建用户create user username identified by &#39;password&#39;; 用户授权首先获取SYSDBA权限，才能授权角色。 oracle为兼容以前版本，提供三种标准角色（role）:connect&#x2F;resource和dba。 三种标准角色：connect role(连接角色) 临时用户，特指不需要建表的用户，通常只赋予他们connect role. connect是使用oracle简单权限，这种权限只对其他用户的表有访问权限，包括select&#x2F;insert&#x2F;update和delete等。 拥有connect role 的用户还能够创建表、视图、序列（sequence）、簇（cluster）、同义词(synonym)、回话（session）和其他 数据的链（link） resource role(资源角色) 更可靠和正式的数据库用户可以授予resource role。 resource提供给用户另外的权限以创建他们自己的表、序列、过程(procedure)、触发器(trigger)、索引(index)和簇(cluster)。 dba role(数据库管理员角色) dba role拥有所有的系统权限 包括无限制的空间限额和给其他用户授予各种权限的能力。system由dba用户拥有 授权命令语法： grant connect, resource to 用户名;例子： grant connect, resource to newUsername ; 撤销权限语法： revoke connect, resource from 用户名;例子： revoke connect, resource from newUsername ;","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"},{"name":"SQL","slug":"SQL","permalink":"https://fentaniao.github.io/categories/SQL/"}],"tags":[{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"},{"name":"DataGrip","slug":"DataGrip","permalink":"https://fentaniao.github.io/tags/DataGrip/"}]},{"title":"Oracle表空间数据文件重命名和修改路径时报错的解决方案","slug":"Oracle-Rename-Error","date":"2022-03-02T04:02:00.000Z","updated":"2022-03-10T02:04:19.427Z","comments":true,"path":"2022/03/02/Oracle-Rename-Error/","link":"","permalink":"https://fentaniao.github.io/2022/03/02/Oracle-Rename-Error/","excerpt":"在SQL Plus中对Oracle数据库表空间的数据文件进行重命名和修改路径时报错ORA-01511， ORA-01121， ORA-01110的解决办法","text":"在SQL Plus中对Oracle数据库表空间的数据文件进行重命名和修改路径时报错ORA-01511， ORA-01121， ORA-01110的解决办法 问题描述在对 Oracle 数据库文件进行重命名或修改路径时发生下面的错误 12345*第1行出现错误:ORA-01525: 重命名数据文件时出错ORA-01121: 无法重命名数据库文件 10 - 文件在使用中或在恢复中ORA-01110: 数据文件10: %需要重命名或修改路径的文件的路径% 解决方案步骤 以SYSTEM用户（只要具有可以修改数据文件的权限即可）登录数据库 将需要修改的表空间设置为离线（需要修改的数据文件属于该表空间） 手动先复制原数据文件到指定目录下，并重命名该文件 最后在SQL Plus中执行相关的修改操作 如需要对数据文件进行额外操作，需要及时将表空间再次设置为在线 样例实现目标将原数据文件&#39;Dir1\\example01.dbf&#39;（其对应表空间为example）重新命名并放置在新的路径下，成为新的数据文件&#39;Dir2\\example02.dbf&#39;。 代码123456ALTER TABLESPACE example OFFLINE NORMAL;-- 等待手动建立副本并手动重命名ALTER TABLESPACE example RENAME DATAFILE &#x27;Dir1\\example01.dbf&#x27; TO &#x27;Dir2\\example02.dbf&#x27;;ALTER TABLESPACE example ONLINE; 原理通过改变指针指向的方式（由旧文件改为指向具有新路径的新名字的副本）来避开文件占用的问题。 参考资料 坑向: 关于在Navicat中对Oracle数据库表空间的数据文件进行重命名和修改路径时报错ORA-01511,ORA-01121,ORA-01110的解决办法：https://blog.csdn.net/New_joined_lion/article/details/108973905?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscan&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscan","categories":[{"name":"SQL","slug":"SQL","permalink":"https://fentaniao.github.io/categories/SQL/"}],"tags":[]},{"title":"如何清除Git所有历史提交记录","slug":"Clear-Git-Commit","date":"2022-02-28T12:46:00.000Z","updated":"2022-03-10T02:04:19.412Z","comments":true,"path":"2022/02/28/Clear-Git-Commit/","link":"","permalink":"https://fentaniao.github.io/2022/02/28/Clear-Git-Commit/","excerpt":"如何彻底清除Git所有历史提交记录使其为“新”库。","text":"如何彻底清除Git所有历史提交记录使其为“新”库。 背景 以前开发中未制定、遵循 git 管理项目标准，随意(不规范)的提交 严重“污染了”提交历史，使开发主线 “脏乱”; 基于以前的仓库重新开发，这样可保留以前的配置等文件，但是需要删除全部的历史记录、tag、分支等; 由于自己或其他方面特殊需求，需要保留仓库的部分属性(创建时间，说明，主页等)，但需要清除历史记录，使其为“新库”。 基于以上3方面的需求，需要提供一个 在不删除原仓库的前提下，清除原仓库的所有历史提交记录(包含：分支、tag) 解决方案。 清除 git 所有历史提交记录方案1.创建新分支1git checkout --orphan &lt;new_branch&gt; 使用 --orphan 选项，可创建1个”清洁”分支(无任何的提交历史，但是当前分支的内容一应俱全。但严格意义上说，这样创建的分支还不是一个真正的分支，因为HEAD指向的引用中没有commit值，只有在进行一次提交后，它才算得上真正的分支。 注意新的分支名可以随意命名，但不能和以前的分支名冲突。这儿特别强调是因为很多人习惯默认将分支名创建为 main。 2.添加文件手动添加一个文件，如README.md 3.commit代码1git commit -m &quot;自定义提交说明&quot; 4.删除原来的主分支(master)1git branch -D main 一般仓库默认的主分支为 main分支，如果原来的主分支不是 main, 用实际的主分支名代替。 5.把当前分支重命名为main1git branch -m main 6.最后把代码推送到远程仓库注意有些仓库有 main分支保护，不允许强制 push，需要在远程仓库项目里暂时把项目保护关掉才能推送。 1git push -f origin main 注意推送前 需要使用git remote -v查看关联的远程仓库的信息（主要是远程库的别名）。虽然远程库的别名默认是 origin ，但你可能设置过其他的别名（而非 origin）。 推送前，有的情况需要设置：git branch --set-upstream-to=origin/main main。 参考资料彻底清除git所有历史提交记录使其为“新”库：https://blog.csdn.net/jhsword/article/details/107543884","categories":[{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/tags/Git/"}]},{"title":"Batch file include external file for variables","slug":"Batch-file-include-external-variables","date":"2022-02-26T09:26:00.000Z","updated":"2022-03-10T02:04:19.410Z","comments":true,"path":"2022/02/26/Batch-file-include-external-variables/","link":"","permalink":"https://fentaniao.github.io/2022/02/26/Batch-file-include-external-variables/","excerpt":"How to make a batch file to include an external file containing some variables (say configuration variables).","text":"How to make a batch file to include an external file containing some variables (say configuration variables). ote: I’m assuming Windows batch files as most people seem to be unaware that there are significant differences and just blindly call everything with grey text on black background DOS. Nevertheless, the first variant should work in DOS as well. Executable configurationThe easiest way to do this is to just put the variables in a batch file themselves, each with its own set statement: 123set var1=value1set var2=value2... and in your main batch: 1call config.cmd Of course, that also enables variables to be created conditionally or depending on aspects of the system, so it’s pretty versatile. However, arbitrary code can run there and if there is a syntax error, then your main batch will exit too. In the UNIX world this seems to be fairly common, especially for shells. And if you think about it, autoexec.bat is nothing else. Key&#x2F;value pairsAnother way would be some kind of var&#x3D;value pairs in the configuration file: 123var1=value1var2=value2... You can then use the following snippet to load them: 1for /f &quot;delims=&quot; %%x in (config.txt) do (set &quot;%%x&quot;) This utilizes a similar trick as before, namely just using set on each line. The quotes are there to escape things like &lt;, &gt;, &amp;, |. However, they will themselves break when quotes are used in the input. Also you always need to be careful when further processing data in variables stored with such characters. Generally, automatically escaping arbitrary input to cause no headaches or problems in batch files seems pretty impossible to me. At least I didn’t find a way to do so yet. Of course, with the first solution you’re pushing that responsibility to the one writing the config file. Reference Batch file include external file for variables: https://stackoverflow.com/questions/2763875/batch-file-include-external-file-for-variables","categories":[{"name":"bash","slug":"bash","permalink":"https://fentaniao.github.io/categories/bash/"}],"tags":[{"name":"bash","slug":"bash","permalink":"https://fentaniao.github.io/tags/bash/"}]},{"title":"Oracle数据库安装的解决方案","slug":"Oracle-Database-Install","date":"2022-02-23T08:09:00.000Z","updated":"2022-03-10T02:04:19.424Z","comments":true,"path":"2022/02/23/Oracle-Database-Install/","link":"","permalink":"https://fentaniao.github.io/2022/02/23/Oracle-Database-Install/","excerpt":"本文收集了Oracle数据库的安装、SQL Plus的登录和DataGrip配置问题的解决方案。","text":"本文收集了Oracle数据库的安装、SQL Plus的登录和DataGrip配置问题的解决方案。 安装教程 安装Oracle教程1：https://www.modb.pro/db/38320 安装Oracle教程2：https://blog.csdn.net/JJJikerUPUP/article/details/90576554 账号密码 SQL Plus快速入门：https://docs.oracle.com/cd/B14117_01/server.101/b12170/qstart.htm 用户名和密码：https://docs.oracle.com/cd/B14117_01/server.101/b12170/ch4.htm#i1142498 DataGripsh设置 DataGrip连接Oracle：https://www.cnblogs.com/HUCHEN/p/9943625.html DataGrip通过外部工具调用SQL Plus：https://www.jetbrains.com/help/datagrip/using-database-cli-tools.html#step_1_create_an_external_tool_configuration 小工具 在线SQL Plus：https://livesql.oracle.com 卸载 卸载Oracle1：https://blog.csdn.net/Ninewind/article/details/89520400 卸载Oracle2：https://zhuanlan.zhihu.com/p/31801927","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"},{"name":"SQL","slug":"SQL","permalink":"https://fentaniao.github.io/categories/SQL/"}],"tags":[{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"},{"name":"DataGrip","slug":"DataGrip","permalink":"https://fentaniao.github.io/tags/DataGrip/"}]},{"title":"如何创建Beamer样式模板","slug":"beamer-template","date":"2022-02-06T15:49:00.000Z","updated":"2022-03-10T02:04:19.430Z","comments":true,"path":"2022/02/06/beamer-template/","link":"","permalink":"https://fentaniao.github.io/2022/02/06/beamer-template/","excerpt":"如何创作一个Beamer模板，包括如何修改常用元素的主题。","text":"如何创作一个Beamer模板，包括如何修改常用元素的主题。 前言本文是对The beamer class Manual for version 3.06内容的重构。 主要内容集中在如何创作一个Beamer模板，包括如何修改常用元素的主题。 您可以通过以下链接访问原文：https://www.docin.com/p-1206582079.html?qq-pf-to=pcqq.c2c 主题主题其实包含主题（beamerthemexxx.sty）、内主题(beamerinnerthemexxx.sty)、外主题(beamerouterthemexxx.sty)、字体主题(beamerfontthemexxx.sty)、颜色主题(beamercolorthemexxx.sty)五个部分，分放在五个sty文件中，写完这五个 sty 文件，再在你的文档中，使用usetheme&#123;xxx&#125;，将你创作的主体包含进来即可。 引自https://lusongno1.blog.csdn.net/article/details/83009395 以上的话说的比较简洁，其实情况为：Color Theme只决定了颜色，Font Themes只决定了字体，Inner Themes决定了Frame环境下内部的枚举环境，块环境，定义环境，定理环境等样式，Outer Themes决定了frame中上下栏，左右侧栏，导航栏等元素的样式。 而Presentation theme包含了以上所有四个内容，但是这四个内容可以相互独立替换。所以最好的情况是给出这五个文件，这样人家可以使用你的主题，也可以在使用别的主题的时候单独使用你的字体样式，或者别的样式 内主题内主题包含以下9种元素的样式： title 标题，enumerate 有序枚举，itemize 无序枚举，block 块，description 描述环境，proof和theorem 证明和定理，graphic和table 图片和表格，footnote 脚注，bib 引用 无序列举\\setbeamertemplate&#123;itemize items&#125;&#123;\\color&#123;red&#125;$\\bullet$&#125; 有序列举具体见颜色的设置 块 显示圆角矩形：\\setbeamertemplate&#123;blocks&#125;[rounded] 显示阴影：\\setbeamertemplate&#123;blocks&#125;[rounded][shadow=true] 外主题外主题包含了以下元素的样式：上下栏，侧栏，logo，frame title 上栏使用\\setbeamertemplate&#123;headline&#125;&#123;&#125; 插入导航条： \\insertsectionnavigationhorizontal&#123;宽度&#125;&#123;左侧文字&#125;&#123;右侧文字&#125;：样式为水平的导航条，显示所有section，高亮当前section，宽度为导航条宽度，尽量不要太大。左右侧文字是你希望插入在每一个section旁边的符号。 我发现一个问题：使用\\setbeamercolor&#123;headline&#125;&#123;fg=,bg=&#125;的方式，改变的是高亮和常规的颜色，而不是headline背景的颜色，这个问题还是没有解决。 \\insertsectionnavigation&#123;宽度&#125;：这个导航栏是竖直的，不建议使用。 还可以插入作者，机构之类的，但是不常用。 logo 导入logo图案：\\logo&#123;\\includegraphics[height=0.5cm]&#123;logo.pdf&#125;&#125; 插入logo：\\insertlogo inserts 字体主题字体主题字体主题包含了所有元素的字体的大小和样式 \\setbeamerfont&#123;名字&#125;&#123;选项&#125; 参数：名字是指定的元素，比如block，frametitle一类的。 选项： size: 字体的大小 series: 字体的样式，\\bfseries 加粗 shape: \\itshape 斜体，\\slshape 伪斜体, \\scshape 小型大写, \\upshape 直立 family: 字体的格式 此图引自：https://blog.csdn.net/y11235816/article/details/91048416 字号命令 对应字号\\script 六号\\footnotesize 小五\\small 五号\\nomalsize 小四\\large 四号\\Large 三号\\LARGE 二号\\huge 一号\\Huge 小初\\HUGE 初号 以下内容引自：https://www.cnblogs.com/LitBro/p/12074820.html 字体导言区使用\\usepackage &#123;ctex&#125; 字体 使用方式 另一种使用方式宋体 \\songti \\CJKfamily{zhsong}黑体 \\heiti \\CJKfamily{zhhei}仿宋 \\fangsong \\CJKfamily{zhfs}楷书 \\kaishu \\CJKfamily{zhkai}隶书 \\lishu \\CJKfamily{zhli}圆体 \\youyuan \\CJKfamily{zhyou}微软雅黑 \\yahei \\CJKfamily{zhyahei} 比如想设置标题为楷书，则使用：\\setbeamerfont{title}{family&#x3D;\\heiti} 颜色主题颜色主题包含了所有元素的前景（字体颜色）和背景 字体颜色的设置命令：\\setbeamercolor{名字}{选项} 该命令有两种用途，可以对一个颜色进行命名，可以设置一个元素的颜色 参数： 名字：元素的名字或者颜色的名字，颜色的名字自己取，可以包含空格 选项： fg&#x3D;color: 前景色 bg&#x3D;color: 背景色 parent&#x3D;{A,B}: 表示当前样式是样式A和样式B的叠加 颜色使用xcolor的方式书写，下图引自: https://blog.csdn.net/weixin_29657201/article/details/78161537 或者用red!50表示50%的红色，用 颜色!数字!颜色 表示百分之多少的前一种颜色和后一种颜色混合beamer中字体使用fg改变颜色，背景使用bg改变颜色 主要可以改变fg和bg的是footline 页脚，headline 页眉，sidebar 侧边栏，frametitle 页标题，navigation 导航栏，title标题，block body 块，block title 块标题，normal text 内环境外的字体 alert text 显著字体， section in toc，ciber 侧栏，enumerate body：有序枚举 主要可以改变fg的是：author，institute，date，subject 主要可以改变bg的是：background canvas 参考资料如何创建Beamer样式模板：https://blog.csdn.net/HGGshiwo/article/details/113774758","categories":[{"name":"LaTeX","slug":"LaTeX","permalink":"https://fentaniao.github.io/categories/LaTeX/"}],"tags":[{"name":"LaTeX","slug":"LaTeX","permalink":"https://fentaniao.github.io/tags/LaTeX/"},{"name":"Beamer","slug":"Beamer","permalink":"https://fentaniao.github.io/tags/Beamer/"}]},{"title":"多台电脑共用SSH Key","slug":"Share-SSH-Key","date":"2022-02-05T10:06:00.000Z","updated":"2022-03-10T02:04:19.429Z","comments":true,"path":"2022/02/05/Share-SSH-Key/","link":"","permalink":"https://fentaniao.github.io/2022/02/05/Share-SSH-Key/","excerpt":"实现SSH Public&#x2F;Private Key的在多台电脑中的共用。","text":"实现SSH Public&#x2F;Private Key的在多台电脑中的共用。 步骤我们给旧的MBP起名叫OLD, 新的叫NEW，方面后面区分 拷贝文件拷贝OLD上的id_rsa和id_rsa.pub到云端&#x2F;U盘&#x2F;邮箱&#x2F;…中备份。这两个文件位于用户目录下的隐藏文件夹~&#x2F;.ssh&#x2F;中。 生成SHH Key在NEW的终端(Terminal)上执行 123git config [--global] user.name &quot;[name]&quot; //请保持和以前一样git config [--global] user.email &quot;[email address]&quot;ssh-keygen -t rsa 这样会在NEW的~&#x2F;.ssh&#x2F;中生成新的id_rsa和id_rsa.pub。 覆盖文件用备份好的OLD中的id_rsa和id_rsa.pub文件，覆盖NEW上对应的文件 鉴权确保NEW上的两个文件的权限是正确的 id_rsa是600，id_rsa.pub是644，比如： 12-rw------- 1 fancy fancy 1675 2013-03-19 12:55 id_rsa-rw-r--r-- 1 fancy fancy 406 2013-03-19 12:55 id_rsa.pub SSH登陆的原理接下来说一下SSH登陆的原理，就可以让我们弄明白这种共用Key的方法的由来。 什么是SSHSSH是一种网络协议，用于计算机之间的加密通信。 公钥Public Key与私钥Private KeySSH需要生成公钥Public Key和私钥Private Key, 常用的是使用RSA算法生成id_rsa.pub和id_rsa。公钥Public Key(id_rsa.pub)是可以暴露在网络传输上的，是不安全的。而私钥Private Key(id_rsa)是不可暴露的，只能存在客户端本机上。 所以公钥Public Key(id_rsa.pub)的权限是644，而私钥Private Key(id_rsa)的权限只能是600。如果权限不对，SSH会认为公钥Public Key(id_rsa.pub)和私钥Private Key(id_rsa)是不可靠的，就无法正常使用SSH登陆了。 同时在服务端会有一个~&#x2F;.ssh&#x2F;authorized_keys文件，里面存放了多个客户端的公钥Public Key(id_rsa.pub)，就表示拥有这些Public Key的客户端就可以通过SSH登陆服务端。 SSH公钥登陆过程 客户端发出公钥登陆的请求(ssh user@host) 服务端返回一段随机字符串 客户端用私钥Private Key(id_rsa)加密这个字符串，再发送回服务端 服务端用~&#x2F;.ssh&#x2F;authorized_keys里面存储的公钥Public Key去解密收到的字符串。如果成功，就表明这个客户端是可信的，客户端就可以成功登陆 由此可见，只要多台电脑上的的公钥Public Key(id_rsa.pub)和私钥Private Key(id_rsa)是一样的，对于服务端来说着其实就是同一个客户端。所以可以通过复制公钥Public Key(id_rsa.pub)和私钥Private Key(id_rsa)到多台电脑来实现共享登陆。 这里也需要强调的是，一定要确保公钥Public Key(id_rsa.pub)和私钥Private Key(id_rsa)的安全，不要随意乱扔，乱扔它会污染环境，砸到小朋友怎么办？就算砸不到小朋友砸到花花草草也不好嘛！Keep SSH Public&#x2F;Private Keys Safe","categories":[{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/tags/Git/"}]},{"title":"C++中将变量名作为字符串传递的解决方案","slug":"Cpp-pass-variable-name-as-string","date":"2021-10-20T06:12:00.000Z","updated":"2022-03-10T02:04:19.414Z","comments":true,"path":"2021/10/20/Cpp-pass-variable-name-as-string/","link":"","permalink":"https://fentaniao.github.io/2021/10/20/Cpp-pass-variable-name-as-string/","excerpt":"在C++中，如何将变量名作为字符串传递的解决方案","text":"在C++中，如何将变量名作为字符串传递的解决方案 英文版本（点击此处查看或下载）中文版本（点击此处查看或下载）","categories":[{"name":"C++","slug":"C","permalink":"https://fentaniao.github.io/categories/C/"}],"tags":[]},{"title":"CMake Configuration","slug":"CMake-Configuration","date":"2021-10-19T12:48:00.000Z","updated":"2022-03-10T02:04:19.411Z","comments":true,"path":"2021/10/19/CMake-Configuration/","link":"","permalink":"https://fentaniao.github.io/2021/10/19/CMake-Configuration/","excerpt":"这是CMake设置的模板。","text":"这是CMake设置的模板。 CMake Configuration[TOC] 开头设置123456#cmake_minimum_requiredcmake_minimum_required(VERSION 3.20)#项目名称project(#项目名称)#CMAKE版本set(CMAKE_CXX_STANDARD 14) 添加支持完全支持支持多文件分别编译运行：项目根目录下所有的 .cpp 文件12345678910111213#支持多文件分别编译运行message(&quot;&lt;&lt; Support exes: &quot;)#遍历项目根目录下所有的 .cpp 文件#要求所有cpp文件命名不重复，不能含有中文，不能含有‘/’等字符file(GLOB_RECURSE files *.cpp)foreach (file $&#123;files&#125;) #获取文件名 string(REGEX REPLACE &quot;.+/(.+)\\\\..*&quot; &quot;\\\\1&quot; exe $&#123;file&#125;) #添加 add_executable($&#123;exe&#125; $&#123;file&#125;) #发送完成消息 message(\\ \\ \\ \\ --\\ src/$&#123;exe&#125;.cpp\\ will\\ be\\ compiled\\ to\\ bin/$&#123;exe&#125;)endforeach () 支持多文件分别编译运行和GTest：项目根目录下所有的 .cpp 文件123456789101112131415161718192021222324252627#支持多文件分别编译运行和GTestmessage(&quot;&lt;&lt; Support exes &amp; GTest: &quot;)set(googleTestDir ./googletest)#Add the google test subdirectoryadd_subdirectory($&#123;googleTestDir&#125;)#include googletest/include dirinclude_directories($&#123;googleTestDir&#125;/googletest/include)#include the googlemock/include dirinclude_directories($&#123;googleTestDir&#125;/googlemock/include)#搜索路径下的文件并添加至列表list，列表名为SOURCE_FILEfile(GLOB_RECURSE files *.cpp)#遍历项目根目录下所有的 .cpp 文件#要求所有cpp文件命名不重复，不能含有中文，不能含有‘/’等字符foreach (file $&#123;files&#125;) #从绝对路径中获取相对路径 file(RELATIVE_PATH path &quot;$&#123;CMAKE_BINARY_DIR&#125;&quot; &quot;$&#123;file&#125;&quot;) #获取文件名 string(REGEX REPLACE &quot;.+/(.+)\\\\..*&quot; &quot;\\\\1&quot; exe $&#123;path&#125;) #添加 add_executable($&#123;exe&#125; $&#123;path&#125;) target_link_libraries($&#123;exe&#125; gtest gtest_main) target_link_libraries($&#123;exe&#125; gmock gmock_main) #发送完成消息 message(\\ \\ \\ \\ --\\ src/$&#123;exe&#125;.cpp\\ will\\ be\\ compiled\\ to\\ bin/$&#123;exe&#125;)endforeach () 功能支持支持GTest：仅连接list中的 .cpp 文件12345678910111213141516171819202122#支持GTestmessage(&quot;&lt;&lt; Support GTest: &quot;)set(googleTestDir ./googletest)#Add the google test subdirectoryadd_subdirectory($&#123;googleTestDir&#125;)#include googletest/include dirinclude_directories($&#123;googleTestDir&#125;/googletest/include)#include the googlemock/include dirinclude_directories($&#123;googleTestDir&#125;/googlemock/include)#仅连接list中的 .cpp 文件#list(APPEND SOURCE_FILE# test.cpp# search/hashSearch.cpp# )#add_executable(GTest $&#123;SOURCE_FILE&#125;)## Link with GoogleTest#target_link_libraries(GTest gtest gtest_main)##Link with GoogleMock#target_link_libraries(GTest gmock gmock_main) 添加目录12#添加目录include_directories(.)","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"},{"name":"C++","slug":"C","permalink":"https://fentaniao.github.io/categories/C/"}],"tags":[{"name":"Jetbrains","slug":"Jetbrains","permalink":"https://fentaniao.github.io/tags/Jetbrains/"},{"name":"Clion","slug":"Clion","permalink":"https://fentaniao.github.io/tags/Clion/"},{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"}]},{"title":"CMakeLists.txt格式和.h头文件的格式","slug":"Cpp-format","date":"2021-10-19T12:48:00.000Z","updated":"2022-03-10T02:04:19.413Z","comments":true,"path":"2021/10/19/Cpp-format/","link":"","permalink":"https://fentaniao.github.io/2021/10/19/Cpp-format/","excerpt":"本文介绍CMakeLists.txt的格式和.h头文件的格式。","text":"本文介绍CMakeLists.txt的格式和.h头文件的格式。 CMakeLists.txt12345678910111213141516171819202122#声明要求的cmake最低版本cmake_minimum_required( VERSION 2.8 )#声明一个cmake工程project( HelloSLAM )#添加一个可执行程序#语法：add_executable( 程序名 源代码文件 ）add_executable( helloSLAM helloSLAM.cpp )#添加一个库#语法：add_library( 库名称 源代码文件 ），会生成 lib库名称.a（静态库）#语法：add_library( 库名称 SHARED 源代码文件 ），会生成 lib库名称.so （共享库）add_library( hello libHelloSLAM.cpp )#将可执行程序链接到库#语法：target_link_libraries ( 程序名 库名称 ）target_link_libraries ( helloSLAM hello )#指定头文件目录#以eigen为例，eigen的头文件目录为&quot;/usr/include/eigen3&quot;include_directories( &quot;/usr/include/eigen3&quot; ) .h head file123456/*源文件为libHelloSLAM.cpp的头文件libHelloSLAM.h*/#ifndef LIBHELLOSLAM_H_#define LIBHELLOSLAM_H_/*源文件中定义的函数名称*/void printHello();#endif 参考资料CMakeLists.txt和.h头文件：https://blog.csdn.net/qq_38329197/article/details/86500071","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"},{"name":"C++","slug":"C","permalink":"https://fentaniao.github.io/categories/C/"}],"tags":[{"name":"Clion","slug":"Clion","permalink":"https://fentaniao.github.io/tags/Clion/"},{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"}]},{"title":"Useful Plugins for JetBrains IDE","slug":"Plugins-List","date":"2021-10-19T12:48:00.000Z","updated":"2022-03-10T02:04:19.428Z","comments":true,"path":"2021/10/19/Plugins-List/","link":"","permalink":"https://fentaniao.github.io/2021/10/19/Plugins-List/","excerpt":"Here gather a lot of useful plugins for JetBrains IDE.","text":"Here gather a lot of useful plugins for JetBrains IDE. Plugins Key Promoter X Indent Rainbow Rainbow Brackets EduTools Chinese Language","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"}],"tags":[{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"},{"name":"Plugins","slug":"Plugins","permalink":"https://fentaniao.github.io/tags/Plugins/"}]},{"title":"GDB调试","slug":"gdb-debug","date":"2021-10-17T15:49:00.000Z","updated":"2022-03-10T02:04:19.431Z","comments":true,"path":"2021/10/17/gdb-debug/","link":"","permalink":"https://fentaniao.github.io/2021/10/17/gdb-debug/","excerpt":"Clion中，通过GDB调试C++程序。","text":"Clion中，通过GDB调试C++程序。 点击此处查看或下载","categories":[{"name":"C++","slug":"C","permalink":"https://fentaniao.github.io/categories/C/"}],"tags":[{"name":"Clion","slug":"Clion","permalink":"https://fentaniao.github.io/tags/Clion/"},{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"}]},{"title":"JetBrains IDE无法正确响应触控输入","slug":"Surface-Pen","date":"2021-10-17T01:01:07.000Z","updated":"2022-03-10T02:04:19.430Z","comments":true,"path":"2021/10/17/Surface-Pen/","link":"","permalink":"https://fentaniao.github.io/2021/10/17/Surface-Pen/","excerpt":"所有的JetBrains IDE无法正确响应Surface Pen输入和触控输入。","text":"所有的JetBrains IDE无法正确响应Surface Pen输入和触控输入。 解决方案方案1：在IDE中添加 在IDE中选择“帮助-编辑自定义vm option”， 添加“-Dcom.jetbrains.default.touchscreen.mode=true” 方案2：手动添加配置文件位置示例：C:\\Users\\username\\AppData\\Local\\JetBrains\\Toolbox\\apps\\IDEA-U\\ch-0\\212.5284.40.vmoptions 参考资料PyCharm 社区版 2020.1：Surface Pro 平板电脑上的 Surface Pen 不响应：https://youtrack.jetbrains.com/issue/JBR-2490","categories":[{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/categories/Surface/"},{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"}],"tags":[{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/tags/Surface/"},{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"}]},{"title":"Clion无法主动杀死进程","slug":"Clion-cannot-kill-process","date":"2021-10-10T14:28:07.000Z","updated":"2022-03-10T02:04:19.412Z","comments":true,"path":"2021/10/10/Clion-cannot-kill-process/","link":"","permalink":"https://fentaniao.github.io/2021/10/10/Clion-cannot-kill-process/","excerpt":"在使用Clion运行C++程序时，即使点了结束按钮后，打开任务管理器，发现刚才运行的程序还在，并没有被杀死。 有时如果一个程序写了死循环，就会出现疯狂占用内存，最后不得不关机重启。","text":"在使用Clion运行C++程序时，即使点了结束按钮后，打开任务管理器，发现刚才运行的程序还在，并没有被杀死。 有时如果一个程序写了死循环，就会出现疯狂占用内存，最后不得不关机重启。 解决方案方案1在JetBrains的社区有人也有这样的问题。 https://intellij-support.jetbrains.com/hc/en-us/community/posts/206620039-Clion-IDE-not-killing-processes- 还有在stackoverflow https://stackoverflow.com/questions/51169357/unable-to-catch-sigint-sent-by-clion 他们给出的解决方法是按着shift+ctrl + A ,然后输入Registry 找到run.processes.with.pty并把它关掉，也可以这样 **(Help -&gt; Find Action -&gt; Registry…)**。 但是神奇的是，这个设置不能被保存，你下次再打开Clion时他依然时开的。 方案2在知乎找到了这个保存的方法：https://www.zhihu.com/question/50971066/answer/198448875 在.CLion2017.3\\config里面新建idea.properties文件，文件内容：run.processes.with.pty=false .CLion2017.3\\config 一般是在C盘的user 下面。 参考资料转载于:https://www.cnblogs.com/-xiangyang/p/9482270.html","categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"}],"tags":[{"name":"Clion","slug":"Clion","permalink":"https://fentaniao.github.io/tags/Clion/"},{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"}]},{"title":"Attention for MS Wireless Display Adapter","slug":"Attention-For-Microsoft-Wireless-Display-Adapter","date":"2021-05-24T11:24:00.000Z","updated":"2022-03-10T02:04:19.409Z","comments":true,"path":"2021/05/24/Attention-For-Microsoft-Wireless-Display-Adapter/","link":"","permalink":"https://fentaniao.github.io/2021/05/24/Attention-For-Microsoft-Wireless-Display-Adapter/","excerpt":"Attention for Microsoft Wireless Display Adapter.","text":"Attention for Microsoft Wireless Display Adapter. Instruments Surface Book 3 &#x3D;&#x3D;充电宝或其他能通过USB提供电力的设备（为无线投屏适配器提供电力）&#x3D;&#x3D; 微软无线投屏适配器 HDMI母对母转接头 Workflow 123456graph TD; Pre[提前打开所需文件的文件夹]--&gt; A[无线投屏适配器连接HDMI端口和USB接口]--&gt;B[在Surface Book 上关闭平板模式和自动旋转]; B--&gt;C[连接无线投屏适配器]; C--&gt;D[拔起Surface Book] D--&gt;E[启动所需软件和文件]","categories":[{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/categories/Surface/"}],"tags":[{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/tags/Surface/"}]}],"categories":[{"name":"IDE config","slug":"IDE-config","permalink":"https://fentaniao.github.io/categories/IDE-config/"},{"name":"SQL","slug":"SQL","permalink":"https://fentaniao.github.io/categories/SQL/"},{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/categories/Git/"},{"name":"bash","slug":"bash","permalink":"https://fentaniao.github.io/categories/bash/"},{"name":"LaTeX","slug":"LaTeX","permalink":"https://fentaniao.github.io/categories/LaTeX/"},{"name":"C++","slug":"C","permalink":"https://fentaniao.github.io/categories/C/"},{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/categories/Surface/"}],"tags":[{"name":"IDE","slug":"IDE","permalink":"https://fentaniao.github.io/tags/IDE/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://fentaniao.github.io/tags/JetBrains/"},{"name":"DataGrip","slug":"DataGrip","permalink":"https://fentaniao.github.io/tags/DataGrip/"},{"name":"Git","slug":"Git","permalink":"https://fentaniao.github.io/tags/Git/"},{"name":"bash","slug":"bash","permalink":"https://fentaniao.github.io/tags/bash/"},{"name":"LaTeX","slug":"LaTeX","permalink":"https://fentaniao.github.io/tags/LaTeX/"},{"name":"Beamer","slug":"Beamer","permalink":"https://fentaniao.github.io/tags/Beamer/"},{"name":"Jetbrains","slug":"Jetbrains","permalink":"https://fentaniao.github.io/tags/Jetbrains/"},{"name":"Clion","slug":"Clion","permalink":"https://fentaniao.github.io/tags/Clion/"},{"name":"Plugins","slug":"Plugins","permalink":"https://fentaniao.github.io/tags/Plugins/"},{"name":"Surface","slug":"Surface","permalink":"https://fentaniao.github.io/tags/Surface/"}]}